#*****************************************************************************\
#  scripts/resource_manager/plugins/nqsII - 
#******************************************************************************
#  Copyright  CEA/DAM/DIF (2012)
#
#  This file is part of Bridge, an abstraction layer to ease batch system and
#  resource manager usage in heterogeneous HPC environments.
#
#  Bridge is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Bridge is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Bridge.  If not, see <http://www.gnu.org/licenses/>
#*****************************************************************************/

function spmd_allocate_cmd {

    ## on se place en mode debug si souhaite
    typeset BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on indique le profile associe au plugin
    export BRIDGE_MPRUN_PROFILE=${BRIDGE_PROFILE_DIR}/nqsII.sh

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} allocate: "

    typeset VERSION="nqsII-1.0"
    typeset exit_status=0

    typeset max_ncore_per_node=${BRIDGE_MPRUN_MAX_NCORE}
 
    spmd_allocate_cmd=
    spmd_allocate_options=
    spmd_allocate_args=

    spmd_allocate_ncore=
    spmd_allocate_nproc=
    spmd_allocate_nnode=
    spmd_allocate_partition=
    spmd_allocate_project=
    spmd_allocate_extra_parameters=
    spmd_allocate_maxmem=
    spmd_allocate_maxtime=

    spmd_allocate_exclusive=no

    while getopts Vc:n:N:p:A:M:T:E:eT: option
      do
      case ${option} in
	  
	  V)
	      echo ${VERSION}
	      return 0
	      ;;

	  c)
	      spmd_allocate_ncore=${OPTARG}
	      ;;

	  n)
	      spmd_allocate_nproc=${OPTARG}
	      ;;

	  N)
	      spmd_allocate_nnode=${OPTARG}
	      ;;

	  p)
	      spmd_allocate_partition=${OPTARG}
	      ;;

	  A)
	      spmd_allocate_project=${OPTARG}
	      ;;

	  E)
	      if [[ -n ${OPTARG} ]]
		  then
		  spmd_allocate_extra_parameters=${OPTARG}
	      fi
	      ;;

	  M)
	      spmd_allocate_maxmem=${OPTARG}
	      ;;

	  T)
	      spmd_allocate_maxtime=${OPTARG}
	      ;;

	  e)
	      spmd_allocate_exclusive=yes
	      ;;

	  *)
	      exit_status=255
	      break
	      ;;
      esac
    done

    ## on export quelques variables d'environnement dont une indiquant que l'on 
    ## a deja fait une allocation afin d'eviter les boucles
    export BRIDGE_MPRUN_ALLOCATION=yes
    
    ${LOGGER} "nqsII doesn't support resources allocation"
    if [[ $# -gt 0 ]]
	then
	${LOGGER} "Executing '$@'"
	$@
    else
	true
    fi
    exit_status=$?

    return ${exit_status}
}



function spmd_run_cmd {

    ## on se place en mode debug si souhaite
    typeset BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on indique le profile associe au plugin
    export BRIDGE_MPRUN_PROFILE=${BRIDGE_PROFILE_DIR}/nqsII.sh

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} run: "

    typeset VERSION="nsqII-1.0"
    typeset exit_status=0

    spmd_run_ncore=
    spmd_run_nproc=1
    spmd_run_nnode=1
    spmd_run_partition=
    spmd_run_project=
    spmd_run_extra_parameters=
    spmd_run_maxmem=
    spmd_run_maxtime=

    max_ncore_per_node=${BRIDGE_MPRUN_MAX_NCORE}
    spmd_run_cmd="mpirun"
    spmd_run_options=
    spmd_run_args=

    while getopts Vc:n:N:p:A:M:T:E:e option
      do
      case ${option} in
	  
	  V)
	      echo ${VERSION}
	      return 0
	      ;;

	  c)
	      spmd_run_ncore=${OPTARG}
	      ;;

	  n)
	      spmd_run_nproc=${OPTARG}
	      ;;

	  N)
	      spmd_run_nnode=${OPTARG}
	      ;;

	  p)
	      spmd_run_partition=${OPTARG}
	      ;;

	  A)
	      spmd_run_project=${OPTARG}
	      ;;

	  E)
	      if [[ -n ${OPTARG} ]]
		  then
		  spmd_run_extra_parameters=${OPTARG}
	      fi
	      ;;

	  M)
	      spmd_run_maxmem=${OPTARG}
	      ;;

	  T)
	      spmd_run_maxtime=${OPTARG}
	      ;;

	  *)
	      exit_status=255
	      break
	      ;;
      esac
    done
    shift ${OPTIND}-1 2>/dev/null
    spmd_run_args=$@

    # on log un message si on est au sein d'une allocation
    if [[ ${BRIDGE_MPRUN_ALLOCATION} == yes ]]
	then
	${LOGGER} "wrapping allocation detected"
    fi
	
    # on appelle les addons eventuels en phase spmd_pre_run
    bridge_addons_call_function bridge_addon_mprun_spmd_pre_run $@

    ## si le code de retour de la stack des addons est 0
    ## alors le job n'a pas ete lance par un des addons
    ## donc on le lance, sinon, un des addons s'en est charge
    ## on passe au post run
    if [ $? -eq 0 ]
	then
	
	# build options
	typeset nproc_per_node
	typeset upper_nproc_per_node
	typeset residue
	typeset upper_residue
	typeset hostnb=0
	typeset nproc
	(( nproc_per_node = spmd_run_nproc / spmd_run_nnode ))
	(( residue = spmd_run_nproc % spmd_run_nnode ))

	while [[ ${spmd_run_nnode} -gt ${hostnb} ]]
	  do
	  nproc=${nproc_per_node}
	  if [[ ${residue} -gt 0 ]]
	      then
	      (( nproc = nproc + 1 ))
	      (( residue = residue - 1 ))
	  fi
	  spmd_run_options="${spmd_run_options} -host ${hostnb} -np ${nproc}"
	  (( hostnb = hostnb + 1 ))
	done

	if [[ -n ${spmd_run_ncore} ]]
	    then
	    ${LOGGER} "parameter 'ncore' is not supported by nqsII"
	fi
	if [[ -n ${spmd_run_partition} ]]
	    then
	    ${LOGGER} "parameter 'partition' is not supported by nqsII"
	fi
	if [[ -n ${spmd_run_project} ]]
	    then
	    ${LOGGER} "parameter 'project' is not supported by nqsII"
	fi
	if [[ -n ${spmd_run_maxmem} ]]
	    then
	    ${LOGGER} "parameter 'maxmem' is not supported by nqsII"
	fi
	if [[ -n ${spmd_run_maxtime} ]]
	    then
	    ${LOGGER} "parameter 'maxtime' is not supported by nqsII"
	fi

	${LOGGER} "${spmd_run_cmd} ${spmd_run_options} ${spmd_run_extra_parameters} ${spmd_run_args}"
	${spmd_run_cmd} ${spmd_run_options} ${spmd_run_extra_parameters} ${spmd_run_args}
	exit_status=$?

    fi

    # on appelle les addons eventuels en phase spmd_post_run
    bridge_addons_call_function bridge_addon_mprun_spmd_post_run ${spmd_run_args}

    ${LOGGER} "exiting with status ${exit_status}"    
    return ${exit_status}
}
