#!/bin/ksh
#*****************************************************************************\
#  scripts/addons/vtune.sh.in - 
#******************************************************************************
#  Copyright  CEA/DAM/DIF (2012)
#
#  This file is part of Bridge, an abstraction layer to ease batch system and
#  resource manager usage in heterogeneous HPC environments.
#
#  Bridge is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Bridge is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Bridge.  If not, see <http://www.gnu.org/licenses/>
#*****************************************************************************/

#------------------------------------------------------------------------------------------------------------------
# wrapper permettant de profiler une application parallele a l'aide
# du profiler vtune
#------------------------------------------------------------------------------------------------------------------


###################################################################################################################
#
# FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES 
#
# FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES 
#
###################################################################################################################

###################################################################################################################
# fonction d'affichage de l'usage
#------------------------------------------------------------------------------------------------------------------
function show_usage {

    echo "${USAGE}"  >& 2

    return 0
}
###################################################################################################################


###################################################################################################################
#
# PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL
#
# PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL
#
###################################################################################################################


###################################################################################################################
# Initialisation des parametres de base
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_VERSION="@PACKAGE_NAME@-@PACKAGE_VERSION@"
typeset PROG_VERSION="1.0.0"
#------------------------------------------------------------------------------------------------------------------
# le repertoire de base est fixe lors de l'installation du produit (via ./configure)
# si il n'est pas coherent, c'est a dire qu'il ne correspond pas a un repertoire
# on fixe un repere dans le systeme de fichier en utilisant le chemin d acces a l executable
#------------------------------------------------------------------------------------------------------------------
typeset BASE_DIR=`dirname $0`
typeset PROGNAME=`basename $0`
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_BASEDIR=@prefix@
if [[ ! -d ${BRIDGE_BASEDIR} ]]
    then
    BRIDGE_BASEDIR=${BRIDGE_BASEDIR:-${BASE_DIR}/../}
fi
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_BINDIR=${BRIDGE_BASEDIR}/bin
typeset BRIDGE_SCRIPTSDIR=${BRIDGE_BASEDIR}/share/scripts
typeset BRIDGE_RESOURCE_MANAGER_PLUGINDIR=${BRIDGE_BASEDIR}/share/scripts/resource_manager/plugins
typeset BRIDGE_ADDON_DIR=${BRIDGE_BASEDIR}/share/scripts/addons
typeset BRIDGE_PROFILE_DIR=${BRIDGE_BASEDIR}/share/scripts/resource_manager/profiles
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_CONFDIR=${BRIDGE_BASEDIR}/etc
if [[ ! -d ${BRIDGE_CONFDIR} ]]
    then
    BRIDGE_CONFDIR=/etc
fi
#------------------------------------------------------------------------------------------------------------------
# Make sure all bridge variables are defined particularly  ${BRIDGE_MPRUN_PROCID}
# does not work ${BRIDGE_PROFILE_DIR}/${RESOURCE_MANAGER}.sh
. ${BRIDGE_PROFILE_DIR}/slurm.sh
#------------------------------------------------------------------------------------------------------------------
# on fixe les options de base du script
typeset BRIDGE_VTUNE_GETOPT_OPTIONS="dvho:O:R:n:t:"
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_HOSTNAME=$(hostname 2>/dev/null)
#------------------------------------------------------------------------------------------------------------------
# on fixe les categories auquelles ce programme appartient (les categories determinent les fichiers de conf
# a sourcer lors de la lecture de la configuration (bridge_readconf)
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_CATEGORIES=""
#------------------------------------------------------------------------------------------------------------------
# on fixe les variables liees a la log
#------------------------------------------------------------------------------------------------------------------
typeset -i BRIDGE_DEBUG_MAXLEVEL=${BRIDGE_DEBUG_MAXLEVEL:-0}
typeset BRIDGE_DEBUG_MODE=${BRIDGE_DEBUG_MODE:-no}
typeset BRIDGE_CHECK_ONLY=${BRIDGE_CHECK_ONLY:-no}
typeset BRIDGE_VERBOSE_MODE=${BRIDGE_VERBOSE_MODE:-no}
typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-1}
typeset -i BRIDGE_VERBOSE_MAXLEVEL=${BRIDGE_VERBOSE_MAXLEVEL:-0}
typeset BRIDGE_LOGFILE=""
typeset EXIT_STATUS=1
#------------------------------------------------------------------------------------------------------------------
# on fixe l'usage de la commande et le code retour par defaut
#------------------------------------------------------------------------------------------------------------------
typeset USAGE="usage : ${PROGNAME} [-dvh] [-n activity-name] [-t analysis-type] [-O options] [-R rank] [-o output_dir] app [args..]
 ${PROGNAME} profile une application parallele a l'aide de vtune 
 default  : collect nehalem-general-exploration "
###################################################################################################################
# On source les librairies communes utiles et on fixe les variables de log
#------------------------------------------------------------------------------------------------------------------
. ${BRIDGE_SCRIPTSDIR}/common/bridge_command
. ${BRIDGE_SCRIPTSDIR}/common/bridge_printer
. ${BRIDGE_SCRIPTSDIR}/common/bridge_readconf
. ${BRIDGE_SCRIPTSDIR}/common/bridge_toolbox
. ${BRIDGE_SCRIPTSDIR}/common/bridge_addon
typeset LOGGER="bridge_printer ${DEFAULT_PRINTER_OPTIONS} -t verbose Vtune Addon :"
typeset ERROR="bridge_printer ${DEFAULT_PRINTER_OPTIONS} -ft error Vtune Addon :"
###################################################################################################################
# On fixe les parametres du script
#------------------------------------------------------------------------------------------------------------------
typeset bridge_vtune_run_cmd=${BRIDGE_VTUNE_RUN_CMD:-"amplxe-cl"}
typeset bridge_vtune_activity_cmd=${BRIDGE_VTUNE_ACTIVITY_CMD:-"amplxe-cl -command"}
#------------------------------------------------------------------------------------------------------------------
#RGH default activity -collect
typeset bridge_vtune_activity_name=-collect
typeset bridge_vtune_activity_type=
typeset bridge_vtune_activity_options=-no-auto-finalize
typeset bridge_vtune_process_rank=all
typeset bridge_vtune_output_dir=
#------------------------------------------------------------------------------------------------------------------
# Analyse des options de la ligne de commande (priorite 1)
# Sauvegarde du nom du script
#------------------------------------------------------------------------------------------------------------------
while getopts ${BRIDGE_VTUNE_GETOPT_OPTIONS} option 2>/dev/null
do
  case $option
      in
      d)
	  BRIDGE_DEBUG_MODE=yes;
	  ((BRIDGE_DEBUG_MAXLEVEL = BRIDGE_DEBUG_MAXLEVEL + 1 ))
	  ;;
      v)
	  BRIDGE_VERBOSE_MODE=yes;
	  ((BRIDGE_VERBOSE_MAXLEVEL = BRIDGE_VERBOSE_MAXLEVEL + 1 ))
	  ;;
      h) 
	  show_usage
	  exit 0
	  ;;
      V) 
	  echo "${PROGNAME}-${PROG_VERSION} (${BRIDGE_VERSION:-?})"
	  exit 0
	  ;;

      n)
	  bridge_vtune_activity_name="${OPTARG}"
	  ;;

      O)
	  bridge_vtune_activity_options="${OPTARG}"
	  ;;

      R)
	  bridge_vtune_process_rank="${OPTARG}"
	  ;;

      o)
	  bridge_vtune_output_dir="${OPTARG}"
	  ;;
      
      t)
	  bridge_vtune_activity_type="${OPTARG}"
	  ;;
      
      *) 
	  show_usage
	  exit 1
	  ;;
  esac
done
#------------------------------------------------------------------------------------------------------------------
# on supprime les options de la ligne courante et on sauvegarde le resultat
shift `expr $OPTIND - 1`
bridge_vtune_args="$@"
###################################################################################################################


###################################################################################################################
# On se place en mode debug si necessaire
#------------------------------------------------------------------------------------------------------------------
if [[ "${BRIDGE_DEBUG_MODE}" = "yes" ]]
then
    set -x
fi
###################################################################################################################


###################################################################################################################
# On lit la configuration du programme et des categories qu'il utilise
# puis on charge le plugin detecte et on verifie que les fonctions d'allocation et d'execution existent
#------------------------------------------------------------------------------------------------------------------
bridge_readconf
###################################################################################################################


###################################################################################################################
# On verifie qu'au moins un argument est present sur la ligne de commande
#------------------------------------------------------------------------------------------------------------------

if [[ $# -lt 1 ]]                                          
then                                       
    show_usage >&2                     
    return 2                   
fi  
###################################################################################################################


###################################################################################################################
# On travaille
#------------------------------------------------------------------------------------------------------------------
# on commence par sourcer le fichier de definition des variables d'environnement parallele
. ${BRIDGE_MPRUN_PROFILE} 2>/dev/null
#------------------------------------------------------------------------------------------------------------------

#RGH la commande en ligne de vtune amplxe-cl ne gere pas la notion de projet 
#juste un repertoire de resultat passe avec l option -r
# on cree un projet par allocation
#RGH typeset BRIDGE_VTUNE_PROJECT="project_${BRIDGE_MPRUN_JOBID}"
#typeset BRIDGE_VTUNE_PROJECT="project_${SLURM_JOBID}"
#typeset BRIDGE_VTUNE_PROJECT_DIR="${TMPDIR}/vtune/${BRIDGE_VTUNE_PROJECT}"
# on verifie que les variables vtune sont fixees correctement
#RGHif [[ -n ${VTUNE_USER_DIR} ]]
#RGH    then
#RGH    ${LOGGER} "surcharge de la variable d'environnement VTUNE_USER_DIR afin de garantir la coherence du projet resultat"
#RGHfi
#RGHexport VTUNE_USER_DIR=${BRIDGE_VTUNE_PROJECT_DIR}
#RGH #${LOGGER} "VTUNE_USER_DIR=${BRIDGE_VTUNE_PROJECT_DIR}"
if [[ -n ${bridge_vtune_output_dir} ]]
then
    export VTUNE_USER_DIR=${bridge_vtune_output_dir}/job${SLURM_JOB_ID}_node${SLURM_NODEID}
else
    export VTUNE_USER_DIR=$PWD/job${SLURM_JOB_ID}_node${SLURM_NODEID}
fi
#------------------------------------------------------------------------------------------------------------------
# on cree un vtune global dir par job et par noeud
#RGHif [[ -n ${VTUNE_GLOBAL_DIR} ]]
#RGH   then
#RGH    ${LOGGER} "surcharge de la variable d'environnement VTUNE_GLOBAL_DIR"
#RGHfi
#RGHVTUNE_GLOBAL_DIR="${BRIDGE_VTUNE_PROJECT_DIR}"
#RGHVTUNE_GLOBAL_DIR="${VTUNE_GLOBAL_DIR}/job${BRIDGE_MPRUN_STEPID}_node${BRIDGE_MPRUN_NODEID}_task${BRIDGE_MPRUN_PROCID}/global_dir"
#RGH${LOGGER} "VTUNE_GLOBAL_DIR=${VTUNE_GLOBAL_DIR}"
#------------------------------------------------------------------------------------------------------------------
# on regarde si une valeur d'identifiant de process est defini
# si oui, on semble bien etre dans un job MPI, on continue
# si non, on sort
typeset VTL_APP
typeset VTL_ARGS
if [[ -z ${BRIDGE_MPRUN_PROCID} ]]
then
    ${ERROR} "ce programme doit etre execute au sein d'une application parallele"
    EXIT_STATUS=3
else
    ## on compare le rang local et le process rank vtune demande
    if [[ ${BRIDGE_MPRUN_PROCID} -eq 0 ]]
    then
        ${LOGGER} "Launching ${bridge_vtune_run_cmd} ${bridge_vtune_activity_name} ${bridge_vtune_activity_type}"
    fi
    if [[ ${BRIDGE_MPRUN_PROCID} -eq ${bridge_vtune_process_rank} ]]
    then
	## on cree eventuellement le repertoire de travail
#RGH	if [[ ! -d ${VTUNE_GLOBAL_DIR} ]]
#RGH	    then
#RGH	    ${LOGGER} "creating VTUNE_GLOBAL_DIR ..."
#RGH	    mkdir -p ${VTUNE_GLOBAL_DIR}
#RGH	    if [ $? -ne 0 ]
#RGH		then
#RGH		${ERROR} "unable to create VTUNE_GLOBAL_DIR. End of program"
#RGH		EXIT_NOW=
#RGH	    else
#RGH		${LOGGER} "created with success"
#RGH	    fi
#RGH	fi

	## on genere la ligne de commande a executer
        VTL_APP=$1
	if [ $# -gt 1 ]
	then
    	    shift
	    VTL_ARGS=$@
	fi
	${LOGGER} "command : ${VTL_APP}"
	${LOGGER} "args : ${VTL_ARGS}"
#RGH	if [[ -z ${bridge_vtune_activity_name} ]]
#RGH    then
#RGH	    bridge_vtune_activity_name="job${BRIDGE_MPRUN_STEPID}_node${BRIDGE_MPRUN_NODEID}_task${BRIDGE_MPRUN_PROCID}"
#RGH	fi
#RGH	${LOGGER} "activity name : ${bridge_vtune_activity_name}"
	if [[ -z ${bridge_vtune_activity_type} ]]
        then
            bridge_vtune_activity_type="nehalem-general-exploration"
	fi
	    ${LOGGER} "activity type : ${bridge_vtune_activity_type}"

## on agit en fonction du process rank demande
    if [[ ${bridge_vtune_process_rank} == all ]]
	then
### on cree eventuellement le  user dir de l activite
	if [[ ! -d ${VTUNE_USER_DIR}/fullsystem} ]]
	then
	    ${LOGGER} "creating VTUNE_USER_DIR ..."
	    mkdir -p ${VTUNE_USER_DIR}/fullsystem
	    if [ $? -ne 0 ]
	    then
	        ${ERROR} "unable to create VTUNE_USER_DIR. End of program"
	        EXIT_NOW=
	    else
	        ${LOGGER} "created with success"
	    fi
	fi
### pas beau et a change, on recupere la liste des cpus binde...
        BRIDGE_CPUSET_MOUNTPOINT=$(lssubsys -m cpuset | cut -d ' ' -f 2)
        BRIDGE_VTUNE_CPUSET=$(cat "$BRIDGE_CPUSET_MOUNTPOINT"/$(cat /proc/self/cpuset)/cpuset.cpus)
### on demarre la collecte sur tout le systeme
	typeset counter=0
	${bridge_vtune_run_cmd} ${bridge_vtune_activity_name} \
	${bridge_vtune_activity_type} ${bridge_vtune_activity_options} \
	-cpu-mask ${BRIDGE_VTUNE_CPUSET} -analyze-system -r ${VTUNE_USER_DIR}/fullsystem --duration unlimited &
#RGH amplxe-cl -command status devrait remplacer mais bug pas reconnue alors que dans le help
#RGH	    until ${bridge_vtune_activity_cmd} status -r ${VTUNE_USER_DIR} | grep -q "The Activity (${bridge_vtune_activity_name}) is running"
#RGH	      do
#RGH	      if [[ ${counter} -gt 15 ]]
#RGH		  then
#RGH		  touch ${VTUNE_USER_DIR}/ERROR
#RGH		  ${ERROR} "unable to start vtune, launching app without profiler support"
#RGH		  break;
#RGH	      fi
#RGH	      (( counter = counter +1 ))
#RGH	      sleep 2
#RGH	    done
#RGH        sleep 2 a changer /voir...
	sleep 2
#### on lance l'appli
	touch ${VTUNE_USER_DIR}/GO
	${VTL_APP} ${VTL_ARGS}

    else
### on cree eventuellement le  user dir de l activite
    if [[ ! -d ${VTUNE_USER_DIR}/task${BRIDGE_MPRUN_PROCID} ]]
    then
        ${LOGGER} "creating VTUNE_USER_DIR ..."
	    mkdir -p ${VTUNE_USER_DIR}/task${BRIDGE_MPRUN_PROCID}
	    if [ $? -ne 0 ]
	    then
	        ${ERROR} "unable to create VTUNE_USER_DIR. End of program"
	        EXIT_NOW=
        else
            ${LOGGER} "created with success"
        fi
    fi
    if [[ -z ${VTL_ARGS} ]]
    then
        COMMAND="${bridge_vtune_run_cmd} ${bridge_vtune_activity_name} \
        ${bridge_vtune_activity_type} ${bridge_vtune_activity_options} -r ${VTUNE_USER_DIR}/task${BRIDGE_MPRUN_PROCID} ${VTL_APP}"
    else
        COMMAND="${bridge_vtune_run_cmd} ${bridge_vtune_activity_name} \
        ${bridge_vtune_activity_type} ${bridge_vtune_activity_options} -r ${VTUNE_USER_DIR}/task${BRIDGE_MPRUN_PROCID} ${VTL_APP},\'${VTL_ARGS}\'"
    fi

    touch ${VTUNE_USER_DIR}/GO
	        ${COMMAND}
    fi

    STATUS=$?
###RGH si vtune a bien demarre
##    if [[ ! -f ${VTUNE_USER_DIR}/ERROR ]]
##    then
#### on arrete un eventuel mode collecte globale
	if [[ ! -f ${VTUNE_USER_DIR}/ERROR && ${bridge_vtune_process_rank} == all ]]
  	then
  	    ${bridge_vtune_activity_cmd} stop -r ${VTUNE_USER_DIR}/fullsystem 
    fi
#RGH
#RGH        La finalization se  fait en fin de sampling ou via le gui	    
#RGH	    #### on genere si ok les packages resultats
#RGH 
#RGH            typeset PACKAGE_FILENAME="vtune_${BRIDGE_VTUNE_PROJECT}_node${BRIDGE_MPRUN_NODEID}"
#RGH            if [[ -n ${bridge_vtune_output_dir} ]]
#RGH                then
#RGH                PACKAGE_FILENAME="${bridge_vtune_output_dir}/${PACKAGE_FILENAME}"
#RGH            fi
#RGH            COMMAND="${bridge_vtune_run_cmd} pack ${PACKAGE_FILENAME}"
#RGH            if [ -f "${PACKAGE_FILENAME}" ] || [ -f "${PACKAGE_FILENAME}.vxp" ]
#RGH                then
#RGH                rm -f ${PACKAGE_FILENAME} ${PACKAGE_FILENAME}.vxp
#RGH            fi
#RGH            ${COMMAND}
#RGH 	### on nettoie les repertoires de travail
#RGH    plus de repertoire de travail
#RGH	rm -rf ${BRIDGE_VTUNE_PROJECT_DIR}
	
    else
    typeset TIMEOUT_FLAG=no
    typeset counter=0
    while  [[ ! -f ${VTUNE_USER_DIR}/GO ]] && [[ ! -f ${VTUNE_USER_DIR}/ERROR ]]
    do
        if [[ ${counter} -gt 40 ]]
        then
            TIMEOUT_FLAG=yes
            break
        fi
        (( counter = counter +1 ))
        sleep 2
    done
    if [[ ! -f ${VTUNE_USER_DIR}/ERROR ]] && [[ ${TIMEOUT_FLAG} == "no" ]]
    then
#### on execute
        $@
    else
        ${ERROR} "Vtune did not start successfully"
    fi
    
    STATUS=$?

    fi
    if [[ ${BRIDGE_MPRUN_PROCID} -eq 0 ]]
    then
        ${LOGGER} " Terminating ${bridge_vtune_run_cmd} - Results in ${VTUNE_USER_DIR}"
    fi
    EXIT_STATUS=$?
    rm -f ${VTUNE_USER_DIR}/GO
fi
###################################################################################################################
###################################################################################################################
# On sort
#------------------------------------------------------------------------------------------------------------------
return ${EXIT_STATUS}
###################################################################################################################
