#*****************************************************************************\
#  scripts/addons/qos.ad - 
#******************************************************************************
#  Copyright  CEA/DAM/DIF (2012)
#
#  This file is part of Bridge, an abstraction layer to ease batch system and
#  resource manager usage in heterogeneous HPC environments.
#
#  Bridge is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Bridge is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Bridge.  If not, see <http://www.gnu.org/licenses/>
#*****************************************************************************/

#################################################################################
#
# Addon for QOS support in Bridge for both msub and mprun
# 
#################################################################################

#################################################################################
# MSUB QOS support
#--------------------------------------------------------------------------------
function bridge_addon_msub_setopt {

    typeset MYGETOPTOPTION="Q:"

    echo "${BRIDGE_MSUB_GETOPT_OPTIONS}" | grep -q ${MYGETOPTOPTION}

    if [ $? -ne 0 ]
	then
	BRIDGE_MSUB_GETOPT_OPTIONS="${BRIDGE_MSUB_GETOPT_OPTIONS}Q:"
    fi

    return 0
}

function bridge_addon_msub_getopt {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi
    
    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1
    
    ## on supprime un eventuel placement d'une QOS dans l'environnement
    ## (afin de ne pas heriter de la configuration sbatch)
    case ${BATCH_SYSTEM} in
        slurm)
	    unset SBATCH_QOS
	    ;;
    esac

    if [[ ${BRIDGE_MSUB_ADDON_QOS_INHERITANCE:-0} -ne 1 ]]
    then
	export BRIDGE_MSUB_ADDON_QOS=
    fi

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} QOS Addon :"
    typeset ERROR="${ERROR} QOS Addon :"

    ## on fixe le message d'aide a afficher si demande
    typeset USAGE="\
\t*) QOS
\t\t -Q sla : enable QOS using provided SLA\n"
    
    ## on fixe le status de sortie par defaut
    typeset exit_status=0

    ## on parse les arguments
    while getopts ${BRIDGE_MSUB_GETOPT_OPTIONS} option
      do
      case ${option} in
	  
	  h)
	      echo -e "${USAGE}" >&2
	      return 0
	      ;;

	  Q)
	      QOS_ARGEXP1="BRIDGE_MSUB_ADDON_QOS=${OPTARG}"
	      ;;
	  
	  *)
	      ;;
      esac
    done

    return ${exit_status:-1}
}

function bridge_addon_msub_alteropt {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi
    
    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1
    
    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} QOS Addon :"
    typeset ERROR="${ERROR} QOS Addon :"

    ## on parse le script msub
    QOS_AWKSCRIPT='
/^#MSUB/ {
        opt=0
        for(i=2; i<=NF; i++)
                if ($i=="-Q") {
                        printf("BRIDGE_MSUB_ADDON_QOS=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
        if ($opt==1) { printf("; ") }
 }
'
    QOS_ARGEXP2=`$AWK "$QOS_AWKSCRIPT" < ${BRIDGE_MSUB_SCRIPTFILE}`

    eval $QOS_ARGEXP2
    eval $QOS_ARGEXP1


    ## on active la QOS
    if [[ -n ${BRIDGE_MSUB_ADDON_QOS} ]]
    then
	if [[ -n ${BRIDGE_MSUB_ADDON_QOS_ALLOWED_QOS} ]]
	then
	    echo ${BRIDGE_MSUB_ADDON_QOS} | egrep -qw "${BRIDGE_MSUB_ADDON_QOS_ALLOWED_QOS}"
	    if [[ $? -eq 0 ]]
	    then
		${LOGGER} "SLA is now ${BRIDGE_MSUB_ADDON_QOS}"
	    else
		${ERROR} "unknown SLA ${BRIDGE_MSUB_ADDON_QOS}, usable SLA are \"${BRIDGE_MSUB_ADDON_QOS_ALLOWED_QOS}\". skipping QOS"
		BRIDGE_MSUB_ADDON_QOS=
	    fi
	else
	    ${LOGGER} "SLA is now ${BRIDGE_MSUB_ADDON_QOS}"
	fi
	export BRIDGE_MSUB_ADDON_QOS
    fi
    if [[ -n ${BRIDGE_MSUB_ADDON_QOS} ]]
    then
	case ${BATCH_SYSTEM} in
            slurm)
		export SBATCH_QOS=${BRIDGE_MSUB_ADDON_QOS}
		;;
	    *)
		${ERROR} "not supported with ${BATCH_SYSTEM}"
		;;
	esac
	
	# on s'assure que la QoS mprun est la meme pour le job batch
	if [[ -n ${BRIDGE_MPRUN_ADDON_QOS} ]]
	then
	    export BRIDGE_MPRUN_ADDON_QOS=${BRIDGE_MSUB_ADDON_QOS}
	fi
	
    fi

    return 0
}

function bridge_addon_msub_alterscript {
    return 0
}
#################################################################################


#################################################################################
# MPRUN QOS support
#--------------------------------------------------------------------------------
function bridge_addon_mprun_setopt {

    typeset MYGETOPTOPTION="Q:"

    echo "${BRIDGE_MPRUN_GETOPT_OPTIONS}" | grep -q ${MYGETOPTOPTION}

    if [ $? -ne 0 ]
	then
	BRIDGE_MPRUN_GETOPT_OPTIONS="${BRIDGE_MPRUN_GETOPT_OPTIONS}${MYGETOPTOPTION}"
    fi

    return 0

}

function bridge_addon_mprun_getopt {
    
    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi
    
    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1
    
    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} QOS Addon :"
    typeset ERROR="${ERROR} QOS Addon :"

    ## on fixe le message d'aide a afficher si demande
    typeset USAGE="\
\t*) QOS
\t\t -Q sla : enable QOS using provided SLA\n"
    
    ## on fixe le status de sortie par defaut
    typeset exit_status=0
    
    ## on parse les arguments
    while getopts ${BRIDGE_MPRUN_GETOPT_OPTIONS} option
      do
      case ${option} in
	  
	  h)
	      echo -e "${USAGE}" >&2
	      return 0
	      ;;

	  Q)
	      BRIDGE_MPRUN_ADDON_QOS=${OPTARG}
	      if [[ -n ${BRIDGE_MPRUN_ADDON_QOS_ALLOWED_QOS} ]]
	      then
		  echo ${BRIDGE_MPRUN_ADDON_QOS} | egrep -qw "${BRIDGE_MPRUN_ADDON_QOS_ALLOWED_QOS}"
		  if [[ $? -eq 0 ]]
		  then
		      ${LOGGER} "SLA is now ${BRIDGE_MPRUN_ADDON_QOS}"
		  else
		      ${ERROR} "unknown SLA ${BRIDGE_MPRUN_ADDON_QOS}, usable SLA are \"${BRIDGE_MPRUN_ADDON_QOS_ALLOWED_QOS}\". skipping QOS"
		      BRIDGE_MPRUN_ADDON_QOS=
		  fi
	      else
		  ${LOGGER} "SLA is now ${BRIDGE_MPRUN_ADDON_QOS}"
	      fi
	      ;;
	  
	  *)
	      ;;
      esac
    done

    return ${exit_status:-1}
}

function bridge_addon_mprun_alteropt {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi
    
    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1
    
    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} QOS Addon :"
    typeset ERROR="${ERROR} QOS Addon :"

    ## on active la QOS
    if [[ -n ${BRIDGE_MPRUN_ADDON_QOS} ]]
    then
	case ${RESOURCE_MANAGER} in
            slurm)
		export SALLOC_QOS=${BRIDGE_MPRUN_ADDON_QOS}
		export SLURM_QOS=${BRIDGE_MPRUN_ADDON_QOS}
		;;
	    *)
		${ERROR} "not supported with ${RESOURCE_MANAGER}"
		;;
	esac
    fi

    return 0

}

function bridge_addon_mprun_spmd_pre_allocate {

    return 0

}

function bridge_addon_mprun_spmd_post_allocate {

    return 0

}

function bridge_addon_mprun_spmd_pre_run {

    return 0

}

function bridge_addon_mprun_spmd_post_run {

    return 0
    
}
#################################################################################
