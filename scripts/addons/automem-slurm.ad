#*****************************************************************************\
#  scripts/addons/automem-slurm.ad - 
#******************************************************************************
#  Copyright  CEA/DAM/DIF (2012)
#
#  This file is part of Bridge, an abstraction layer to ease batch system and
#  resource manager usage in heterogeneous HPC environments.
#
#  Bridge is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Bridge is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Bridge.  If not, see <http://www.gnu.org/licenses/>
#*****************************************************************************/


# MSUB

function bridge_addon_msub_setopt {
    return 0
}

function bridge_addon_msub_getopt {
    return 0
}


function bridge_addon_msub_alteropt {

    ## on se place en mode debug si souhaite
    typeset BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi
    
    ## on incremente le niveau de log
    typeset BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1
    
    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} DAM Auto-memory Addon :"

    if [[ ${BRIDGE_AUTOMEM_MODE} == 0 ]]
    then
	${LOGGER} "disabled by env variable"
	return 0
    fi

    ## on recupere la valeur requise par coeur de calcul
    typeset defmempercpu=$(cat /etc/slurm/slurm.conf | egrep "^DefMemPerCPU=" | sed 's/.*=//')
    if [[ -n ${BRIDGE_MSUB_MAXMEM} ]]
    then
	typeset mempercpu=${BRIDGE_MSUB_MAXMEM}
    else
	if [[ -z ${defmempercpu} ]]
	then
	    ${LOGGER} "unable to get slurm DefMemPerCpu value, skipping this addon"
	    return 0
	fi
	typeset mempercpu=${defmempercpu}
    fi

    ## on cherche les partitions compatibles avec ce type de demande et on prend la 
    ## premiere (celle dont la quantite est la plus faible)
    typeset valid_queue
    valid_queue=$(sinfo -a -h -o "%R %m %X %Y" | sort -n -k 2 | egrep -w "${BRIDGE_MSUB_QUEUE}|bigmem" | \
	awk -v mem=${mempercpu}  '{if ( mem <= $2 / $3 /$4 ) print $1}' | head -n 1 )
    if [[ -n ${valid_queue} ]]
    then
	${LOGGER} "now using queue '${valid_queue}' due to memory requirement of ${mempercpu} Mo per core"
	export BRIDGE_MSUB_QUEUE=${valid_queue}
	return 0
    fi

    ## on est dans le cas ou la demande est superieure aux valeurs autorisees par coeur sur les partitions
    ## on regarde donc sur quelle partition on peut lancer l'application pour respecter la quantite requise 
    ## par tache
    mempertask=$(( ${mempercpu} * ${BRIDGE_MSUB_NCORE:-1} ))
    valid_queue=$(sinfo -a -h -o "%R %m" | sort -n -k 2 | egrep -w "${BRIDGE_MSUB_QUEUE}|bigmem" | \
	awk -v mem=${mempertask}  '{if ( mem <= $2 ) print $1}' | head -n 1 )
    if [[ -n ${valid_queue} ]]
    then
	${LOGGER} "now using queue '${valid_queue}' due to memory requirement of ${mempertask} Mo per task"
	export BRIDGE_MSUB_QUEUE=${valid_queue}
    fi

    return 0
}


function bridge_addon_msub_alterscript {
    return 0
}

# MPRUN

function bridge_addon_mprun_setopt {
    return 0
}

function bridge_addon_mprun_getopt {
    return 0
}

function bridge_addon_mprun_alteropt {

    ## on se place en mode debug si souhaite
    typeset BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi
    
    ## on incremente le niveau de log
    typeset BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1
    
    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} DAM Auto-memory Addon :"

    ## on rend la main si on est deja dans une allocation
    if [[ ${BRIDGE_MPRUN_ALLOCATION} == "yes" ]]
    then
	${LOGGER} "wrapping allocation detected, skipping"
	return 0
    fi

    if [[ ${BRIDGE_AUTOMEM_MODE} == 0 ]]
    then
	${LOGGER} "disabled by env variable"
	return 0
    fi

    ## on recupere la valeur requise par coeur de calcul
    typeset defmempercpu=$(cat /etc/slurm/slurm.conf | egrep "^DefMemPerCPU=" | sed 's/.*=//')
    if [[ -n ${bridge_mprun_maxmem} ]]
    then
	typeset mempercpu=${bridge_mprun_maxmem}
    else
	if [[ -z ${defmempercpu} ]]
	then
	    ${LOGGER} "unable to get slurm DefMemPerCpu value, skipping this addon"
	    return 0
	fi
	typeset mempercpu=${defmempercpu}
    fi

    ## on cherche les partitions compatibles avec ce type de demande et on prend la 
    ## premiere (celle dont la quantite est la plus faible)
    typeset valid_queue
    if [[ -n ${bridge_mprun_partition} ]]
    then  
	valid_queue=$(sinfo -a -h -o "%R %m %X %Y" | sort -n -k 2 | egrep -w "bigmem|${bridge_mprun_partition}" | \
	    awk -v mem=${mempercpu}  '{if ( mem <= $2 / $3 /$4 ) print $1}' | head -n 1 )
    else
	valid_queue=$(sinfo -a -h -o "%R %m %X %Y" | sort -n -k 2 | egrep -w "parallele|bigmem" | \
	    awk -v mem=${mempercpu}  '{if ( mem <= $2 / $3 /$4 ) print $1}' | head -n 1 )
    fi
    if [[ -n ${valid_queue} ]]
    then
	${LOGGER} "now using partition '${valid_queue}' due to memory requirement of ${mempercpu} Mo per core"
	export BRIDGE_MPRUN_PARTITION=${valid_queue}
	export bridge_mprun_partition=${valid_queue}
	return 0
    fi

    ## on est dans le cas ou la demande est superieure aux valeurs autorisees par coeur sur les partitions
    ## on regarde donc sur quelle partition on peut lancer l'application pour respecter la quantite requise 
    ## par tache
    mempertask=$(( ${mempercpu} * ${bridge_mprun_ncore:-1} ))
    if [[ -n ${bridge_mprun_partition} ]]
    then
	valid_queue=$(sinfo -a -h -o "%R %m" | sort -n -k 2 | egrep -w "bigmem|${bridge_mprun_partition}" | \
	    awk -v mem=${mempertask}  '{if ( mem <= $2 ) print $1}' | head -n 1 )
    else
	valid_queue=$(sinfo -a -h -o "%R %m" | sort -n -k 2 | egrep -w "parallele|bigmem" | \
	    awk -v mem=${mempertask}  '{if ( mem <= $2 ) print $1}' | head -n 1 )
    fi
    if [[ -n ${valid_queue} ]]
    then
	${LOGGER} "now using queue '${valid_queue}' due to memory requirement of ${mempertask} Mo per task"
	export BRIDGE_MPRUN_PARTITION=${valid_queue}
	export bridge_mprun_partition=${valid_queue}
    else
	${LOGGER} "no queue can be used to serve your request of ${mempertask} Mo per task"
    fi

    return 0
}

function bridge_addon_mprun_spmd_pre_allocate {
    return 0
}


function bridge_addon_mprun_spmd_post_allocate {
    return 0
}


function bridge_addon_mprun_spmd_pre_run {
    return 0
}

function bridge_addon_mprun_spmd_post_run {
    return 0
}
