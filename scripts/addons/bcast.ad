#*****************************************************************************\
#  scripts/addons/bcast.ad - 
#******************************************************************************
#  Copyright  CEA/DAM/DIF (2012)
#
#  This file is part of Bridge, an abstraction layer to ease batch system and
#  resource manager usage in heterogeneous HPC environments.
#
#  Bridge is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Bridge is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Bridge.  If not, see <http://www.gnu.org/licenses/>
#*****************************************************************************/

#################################################################################
#
# Addon to broadcast executable in Bridge with Slurm prior parallel launch
#
#
#################################################################################

#Returns 0 if no broadcast is required, 1 for sbcast based bcast, 2 for srun/cp based bcast
function is_bcast_needed {
    typeset analyzed_file=( "$@" )
    if [[ ${BRIDGE_BROADCAST_MODE} -eq 1 ]] && [[ -n ${BRIDGE_BROADCAST_INCLUDE_PATTERN} ]]
    then
	typeset exec_file="$(/usr/bin/which "${analyzed_file[0]}")"
	/usr/bin/which "${exec_file}" 2>/dev/null | egrep -q "${BRIDGE_BROADCAST_INCLUDE_PATTERN}"
	if [[ $? -ne 0 ]]
	then
	    ${LOGGER} "avoiding to broadcast ${exec_file} because of inclusion pattern \"${BRIDGE_BROADCAST_INCLUDE_PATTERN}\""
	    return 0
	else
	    ${LOGGER} "broadcasting ${exec_file} because of inclusion pattern \"${BRIDGE_BROADCAST_INCLUDE_PATTERN}\""
	fi
    elif [[ ${BRIDGE_BROADCAST_MODE} -eq 1 ]] && [[ -n ${BRIDGE_BROADCAST_EXCLUDE_PATTERN} ]]
    then
	typeset exec_file="$(/usr/bin/which "${analyzed_file[0]}")"
	/usr/bin/which ${exec_file} 2>/dev/null | egrep -q "${BRIDGE_BROADCAST_EXCLUDE_PATTERN}"
	if [[ $? -eq 0 ]]
	then
	    ${LOGGER} "avoiding to broadcast ${exec_file} because of exclusion pattern \"${BRIDGE_BROADCAST_EXCLUDE_PATTERN}\""
	    return 0
	else
	    ${LOGGER} "broadcasting ${exec_file} because of exclusion pattern \"${BRIDGE_BROADCAST_EXCLUDE_PATTERN}\""
	fi
    fi

    if [[ -n ${BRIDGE_BROADCAST_LOCAL_CP} ]]
    then
	if [[ ${BRIDGE_BROADCAST_LOCAL_CP} -eq 0 ]]
	then
	    return 1
	elif [[ ${BRIDGE_BROADCAST_LOCAL_CP} -eq 1 ]]
	then
	    return 2
	fi
    fi

    if [[ -n ${BRIDGE_BROADCAST_LOCAL_CP_INCLUDE_PATTERN} ]]
    then
       typeset exec_file="$(/usr/bin/which "${analyzed_file[0]}")"
       /usr/bin/which ${exec_file} 2>/dev/null | egrep -q "${BRIDGE_BROADCAST_LOCAL_CP_INCLUDE_PATTERN}"
       if [[ $? -eq 0 ]]
       then
           ${LOGGER} "broadcasting ${exec_file} using parallel local cp because of inclusion pattern \"${BRIDGE_BROADCAST_LOCAL_CP_INCLUDE_PATTERN}\""
	   return 2
       fi
    fi

    # by default, do not enable broadcast
    return 0
}


function compute_bcast_name {
    typeset analyzed_file=( "$@" )
    tmpfile=$(mktemp -p "${TMPDIR:-/tmp}" $(id -un)_${analyzed_file##*\/}_XXXX_${SLURM_JOBID})
    echo $tmpfile
}

function do_bcast {

    typeset requested_mode=$1
    typeset orig_file="$2"
    typeset dst_file="$3"

    # if parallel local copy mode is requested, then do it, otherwise, use
    # SLURM sbcast cmd
    if [[ ${requested_mode} -eq 2 ]]
    then
        ${LOGGER} "broadcasting ${orig_file} to remote:${dst_file} using parallel local cp ..."
        srun --input none -w $SLURM_NODELIST -n $SLURM_NNODES cp -p "${orig_file}" "${dst_file}"
    else
        ${LOGGER} "broadcasting ${orig_file} to remote:${dst_file} ..."
        sbcast -Cfp "${orig_file}" "${dst_file}"
    fi

    return $?
}

function bridge_addon_mprun_setopt {

    typeset MYGETOPTOPTION="Bb"

    echo "${BRIDGE_MPRUN_GETOPT_OPTIONS}" | grep -q ${MYGETOPTOPTION}

    if [ $? -ne 0 ]
	then
	BRIDGE_MPRUN_GETOPT_OPTIONS="${BRIDGE_MPRUN_GETOPT_OPTIONS}${MYGETOPTOPTION}"
    fi

    return 0

}

function bridge_addon_mprun_getopt {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} Broadcast Addon :"

    ## on fixe le message d'aide a afficher si demande
    typeset USAGE="\
\t*) Broadcast Executable
\t\t -B : broadcast executable before parallel execution \n\
\t\t -b : do not broadcast executable before parallel execution \n\
\n\
\t   Broadcast is made in respect of the BRIDGE_BROADCAST_INCLUDE_PATTERN and \n\
\t   BRIDGE_BROADCAST_EXCLUDE_PATTERN env variables (the first takes precedence). \n\
\t   Only executables that will match (or not in case of exclude) the pattern will be \n\
\t   broadcasted to the execution hosts.\n\
\t   The pattern is expressed in egrep format, see man egrep for more details.\n\

"

    ## on fixe le status de sortie par defaut
    typeset exit_status=0

    ## on parse les arguments
    while getopts ${BRIDGE_MPRUN_GETOPT_OPTIONS} option
      do
      case ${option} in

	  h)
	      echo -e "${USAGE}" >&2
	      return 0
	      ;;

	  B)
	      export BRIDGE_BROADCAST_MODE=1
	      ${LOGGER} "enabled"
	      ;;

	  b)
	      export BRIDGE_BROADCAST_MODE=0
	      ${LOGGER} "disabled"
	      ;;

	  *)
	      ;;
      esac
    done

    return 0

}

function bridge_addon_mprun_alteropt {
    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} Broadcast Addon :"

    if [[ ${BRIDGE_BROADCAST_MODE} -eq 1 ]]
    then
	## force allocation
	if [[ ${BRIDGE_MPRUN_ALLOCATION} != yes ]]
	then
	    bridge_mprun_force_allocation=yes
	fi
    fi

    return 0
}

function bridge_addon_mprun_spmd_pre_allocate {
    return 0
}

function bridge_addon_mprun_spmd_post_allocate {
    return 0
}

function bridge_addon_mprun_spmd_pre_run {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} Broadcast Addon :"

    if [[ ${BRIDGE_MPRUN_ADDON_MPMD_STAGE} -eq 2 ]] && [[ -n ${BRIDGE_MPRUN_ADDON_MPMD_SCRIPT} ]]
    then
	typeset gen_script="$(/usr/bin/which "${spmd_run_args[0]}")"
	typeset bcast_mode=0

	CMD_ID=0	
	while read -r RAWCMD
	do
	    eval CMD=\( "$RAWCMD" \)
	    if [[ -z "${CMD[1]}" ]]
	    then
		continue
	    fi

	    is_bcast_needed "${CMD[1]}"
	    bcast_mode=$?
	    if [[ $bcast_mode -ne 0 ]]
	    then
	    ## on broadcast le job
		typeset exec_file="$(/usr/bin/which "${CMD[1]}")"
		typeset dst_file="$(compute_bcast_name "$exec_file")_${CMD_ID}"
		do_bcast "${bcast_mode}" "${exec_file}" "${dst_file}"
		if [[ $? -ne 0 ]]
		then
		    ${LOGGER} "failure of broadcast ... staying in standard mode"
		else
		    ${LOGGER} "swapping executables ..."
		    NCMD=( "${CMD[@]}" )
		    NCMD[1]="$dst_file"
		    SAFENCMD="$(printf "%q " "${NCMD[@]:1}")"
		    sed -i "/#BRIDGE-MPMDv1-TASK-MARKER/{ N;s*^#BRIDGE-MPMDv1-TASK-MARKER\n${CMD[*]:1}*#BRIDGE-MPMDv1-TASK-MARKER\n${SAFENCMD}*}" "${gen_script}"
		fi
	    fi
	    CMD_ID=$(( CMD_ID + 1 ))
	done < "${BRIDGE_MPRUN_ADDON_MPMD_SCRIPT}"
    fi

    is_bcast_needed "${spmd_run_args[@]}"
    bcast_mode=$?

    if [[ ${BRIDGE_BROADCAST_MODE} -eq 1 ]] && [[ ${bcast_mode} -ne 0 ]]
    then
	## on broadcast le job
	typeset exec_file="$(/usr/bin/which "${spmd_run_args[0]}")"

	export BRIDGE_BROADCAST_ORIGINAL_CMD="${exec_file}"
	typeset dst_file="$(compute_bcast_name "$exec_file")"
	do_bcast "$bcast_mode" "${exec_file}" "${dst_file}"
	if [[ $? -ne 0 ]]
	then
	    ${LOGGER} "failure of broadcast ... staying in standard mode"
	else
	    ${LOGGER} "swapping executables ..."
	    spmd_run_args[0]="${dst_file}"
	fi

    fi

    return 0
}

function bridge_addon_mprun_spmd_post_run {
    return 0
}
