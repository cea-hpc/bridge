#*****************************************************************************\
#  scripts/addons/filesystems.ad -
#******************************************************************************
#  Copyright  CEA/DAM/DIF (2012)
#
#  This file is part of Bridge, an abstraction layer to ease batch system and
#  resource manager usage in heterogeneous HPC environments.
#
#  Bridge is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Bridge is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Bridge.  If not, see <http://www.gnu.org/licenses/>
#*****************************************************************************/

#################################################################################
#
# Addon for filesystem selection support in Bridge for both msub and mprun
#
#################################################################################


function test_filesystems {
    # Debug mode
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
    then
	set -x
    fi

    ## Increase verbosity level
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## Header for log
    typeset LOGGER="${LOGGER} Bridge Filesystems Addon :"
    typeset ERROR="${ERROR} Bridge Filesystems Addon :"

    if [[ "${BRIDGE_MPRUN_ALLOCATION}" == yes ]] && [[ "$1" == "allocate" ]]; then
        ${LOGGER} "wrapping allocation detected: skipping"
    	return 0
    fi

    if [ -n "${BRIDGE_REQUEST_PFS}" ]
    then
        IFS=',' read -A req_fs <<< "${BRIDGE_REQUEST_PFS}"
        IFS=',' read -A avail_fs <<< "${BRIDGE_AVAILABLE_PFS}"
    	fs_licenses="fs_unshare"

	if [[ ${BRIDGE_REQUEST_PFS} != "none" ]]; then
    	    for fs in "${req_fs[@]}"
    	    do
		if  ! array_contains $fs "${avail_fs[@]}"; then
    		    ${ERROR} "Unknown fs: $fs"
    		    exit 1
    		fi
		fs_licenses+=",fs_"$fs
    	    done
	fi
    	${LOGGER} "requesting filesystem licenses: $fs_licenses"
        if [[ $1 == "allocate" ]]; then
            spmd_allocate_extra_parameters+=( "--licenses=$fs_licenses" )
            spmd_run_extra_parameters+=( "--licenses=$fs_licenses" )
    	elif [[ -n "$BRIDGE_MSUB_LICENSES" ]]; then
    	    BRIDGE_MSUB_LICENSES="$BRIDGE_MSUB_LICENSES,$fs_licenses"
	else
    	    BRIDGE_MSUB_LICENSES=$fs_licenses
    	fi
    else
	${LOGGER} "requesting default features"
    fi

    return 0
}

function array_contains {
    typeset e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}


#################################################################################
# MSUB FILESYSTEMS support
#--------------------------------------------------------------------------------
function bridge_addon_msub_setopt {

    typeset MYGETOPTOPTION="m:"

    echo "${BRIDGE_MSUB_GETOPT_OPTIONS}" | grep -q ${MYGETOPTOPTION}

    if [ $? -ne 0 ]
    then
	BRIDGE_MSUB_GETOPT_OPTIONS="${BRIDGE_MSUB_GETOPT_OPTIONS}${MYGETOPTOPTION}"
    fi

    return 0

}

function bridge_addon_msub_getopt {
    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
    then
	set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} Bridge Filesystems Addon :"

    ## on fixe le message d'aide a afficher si demande
    typeset USAGE="\
\t*) Mounted filesystems
\t\t -m work,store : specify that only work and store are required for the job.
"
    ## on fixe le status de sortie par defaut
    typeset exit_status=0

    ## on parse les arguments
    while getopts ${BRIDGE_MSUB_GETOPT_OPTIONS} option
    do
	case ${option} in

	    h)
	        echo -e "${USAGE}" >&2
		return 0
		;;

	    m)
		BRIDGE_REQUEST_PFS="${OPTARG}"
		;;

	    *)
		;;
	esac
    done

    return 0
}

function bridge_addon_msub_alteropt {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} Bridge Filesystems Addon :"
    typeset ERROR="${ERROR} Bridge Filesystems Addon :"

    ## On ne lit le fichier que si on n'a pas deja active l'addon par ailleurs
    if [[ -z ${BRIDGE_REQUEST_PFS} ]]; then
	## on parse le script msub
	FILESYSTEMS_AWKSCRIPT='
/^#MSUB/ {
        opt=0
        for(i=2; i<=NF; i++)
                if ($i=="-m") {
                        printf("BRIDGE_REQUEST_PFS=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
        if ($opt==1) { printf("; ") }
 }
'
	FILESYSTEMS_ARGEXP=`${AWK:-awk} "$FILESYSTEMS_AWKSCRIPT" < ${BRIDGE_MSUB_SCRIPTFILE}`
	eval $FILESYSTEMS_ARGEXP
    fi

    test_filesystems "batch"
    return 0
}

function bridge_addon_msub_alterscript {
    return 0
}
#################################################################################


#################################################################################
# MPRUN FILESYSTEMS support
#--------------------------------------------------------------------------------
function bridge_addon_mprun_setopt {

    typeset MYGETOPTOPTION="m:"

    echo "${BRIDGE_MPRUN_GETOPT_OPTIONS}" | grep -q ${MYGETOPTOPTION}

    if [ $? -ne 0 ]
    then
	BRIDGE_MPRUN_GETOPT_OPTIONS="${BRIDGE_MPRUN_GETOPT_OPTIONS}${MYGETOPTOPTION}"
    fi


    return 0

}

function bridge_addon_mprun_getopt {
    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
    then
	set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} Bridge Filesystems Addon :"

    ## on fixe le message d'aide a afficher si demande
    typeset USAGE="\
\t*) Mounted filesystems
\t\t -m fs1,fs2 : specify that only fs1 and fs2 are required for the job
\t\t The following filesystems may be specified: ${BRIDGE_AVAILABLE_PFS}
"
    ## on fixe le status de sortie par defaut
    typeset exit_status=0

    ## on parse les arguments
    while getopts ${BRIDGE_MPRUN_GETOPT_OPTIONS} option
    do
	case ${option} in

	    h)
	        echo -e "${USAGE}" >&2
		return 0
		;;

	    m)
		BRIDGE_REQUEST_PFS="${OPTARG}"
		;;

	    *)
		;;
	esac
    done

    return 0
}

function bridge_addon_mprun_alteropt {
    test_filesystems "allocate"
    return 0
}

function bridge_addon_mprun_spmd_pre_allocate {
    return 0
}

function bridge_addon_mprun_spmd_post_allocate {

    return 0

}

function bridge_addon_mprun_spmd_pre_run {

    return 0
}

function bridge_addon_mprun_spmd_post_run {

    return 0
}
#################################################################################
