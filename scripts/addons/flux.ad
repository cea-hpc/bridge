#*****************************************************************************\
#  scripts/addons/flux.ad -
#******************************************************************************
#  Copyright  CEA/DAM/DIF (2022)
#
#  This file is part of Bridge, an abstraction layer to ease batch system and
#  resource manager usage in heterogeneous HPC environments.
#
#  Bridge is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Bridge is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Bridge.  If not, see <http://www.gnu.org/licenses/>
#*****************************************************************************/

#################################################################################
#
# Addon for Flux support in Bridge for both msub and mprun
#
#################################################################################

#################################################################################
# MSUB Flux support
#--------------------------------------------------------------------------------
function bridge_addon_msub_setopt {
    typeset MYGETOPTOPTION="F"

    echo "${BRIDGE_MSUB_GETOPT_OPTIONS}" | grep -q ${MYGETOPTOPTION}

    if [ $? -ne 0 ]
        then
        BRIDGE_MSUB_GETOPT_OPTIONS="${BRIDGE_MSUB_GETOPT_OPTIONS}${MYGETOPTOPTION}"
    fi

    return 0
}

function bridge_addon_msub_getopt {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
        then
        set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} Flux Addon :"
    typeset ERROR="${ERROR} Flux Addon :"

    ## on fixe le message daide a afficher si demande
    typeset USAGE="\
\t*) Flux
\t\t -F: run the batch script in a Flux scheduling environment (EXPERIMENTAL)\n"

    ## on fixe le status de sortie par defaut
    typeset exit_status=0

    ## on parse les arguments
    while getopts ${BRIDGE_MSUB_GETOPT_OPTIONS} option
      do
      case ${option} in

          h)
              echo -e "${USAGE}" >&2
              return 0
              ;;

          F)
              BRIDGE_MSUB_ADDON_FLUX_ENABLED=1
              ${LOGGER} "Flux selected by command line parameter"
              ;;

          *)
              ;;
      esac
    done

    export BRIDGE_MSUB_ADDON_FLUX_ENABLED
    return ${exit_status:-1}
}

function bridge_addon_msub_alteropt {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
        then
        set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} Flux Addon :"
    typeset ERROR="${ERROR} Flux Addon :"

    ## si on a deja activer Flux on ne cherche pas dans le fichier
    if [[ ${BRIDGE_MSUB_ADDON_FLUX_ENABLED} -ne 1 ]]
    then
        ## on parse le script msub
        FLUX_AWKSCRIPT='
/^#MSUB/ {
        opt=0
        for(i=2; i<=NF; i++)
                if ($i=="-F") {
                        printf("BRIDGE_MSUB_ADDON_FLUX_ENABLED=1")
                }
 }
'
        FLUX_ARGEXP=`${AWK:-awk} "$FLUX_AWKSCRIPT" < ${BRIDGE_MSUB_SCRIPTFILE}`
        if [[ -n ${FLUX_ARGEXP} ]]
        then
            ${LOGGER} "Flux selected by '#MSUB -F' pragma in input script"
        fi
        eval $FLUX_ARGEXP
    fi

    export BRIDGE_MSUB_ADDON_FLUX_ENABLED
    return 0
}

function bridge_addon_msub_alterscript {
    return 0
}
#################################################################################


#################################################################################
# MPRUN FLUX support
#--------------------------------------------------------------------------------
function bridge_addon_mprun_setopt {

    typeset MYGETOPTOPTION="F"

    echo "${BRIDGE_MPRUN_GETOPT_OPTIONS}" | grep -q ${MYGETOPTOPTION}

    if [ $? -ne 0 ]
        then
        BRIDGE_MPRUN_GETOPT_OPTIONS="${BRIDGE_MPRUN_GETOPT_OPTIONS}${MYGETOPTOPTION}"
    fi

    return 0
}

function bridge_addon_mprun_getopt {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
        then
        set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on ajoute une entete a la log
    typeset LOGGER="${LOGGER} Flux Addon :"

    ## par defaut, on desactive le mode flux
    if [[ -z ${BRIDGE_MPRUN_ADDON_FLUX} ]]
        then
        BRIDGE_MPRUN_ADDON_FLUX=0
    fi

    ## on fixe le message d'aide a afficher si demande
    typeset USAGE="\
\t*) Flux
\t\t -F : start an interactive flux session
"

    ## on parse les arguments
    while getopts ${BRIDGE_MPRUN_GETOPT_OPTIONS} option
        do
        case ${option} in

            h)
                echo -e "${USAGE}" >&2
                return 0
                ;;

            F)
                export BRIDGE_MPRUN_ADDON_FLUX=1
                ${LOGGER} "Flux mode enabled"
                ;;

            *)
                ;;
        esac
    done

    return 0
}

function bridge_addon_mprun_alteropt {

    if [[ "$BRIDGE_MPRUN_ADDON_FLUX" -eq 1 ]]; then
        if [[ ${BRIDGE_MPRUN_ALLOCATION} == "yes" ]]; then
            typeset -a spmd_run_args_new
            spmd_run_extra_parameters+=("--cpu_bind=none" "--export=ALL,RESOURCE_MANAGER=flux,BATCH_SYSTEM=flux")
            spmd_run_args_new=(flux start -- "${spmd_run_args[@]}")
            spmd_run_args=("${spmd_run_args_new[@]}")
            bridge_mprun_addon_flux_orig_ncore=$BRIDGE_MPRUN_NCORE
            bridge_mprun_addon_flux_orig_nproc=$BRIDGE_MPRUN_NPROC
            unset bridge_mprun_ncore
            unset BRIDGE_MPRUN_NCORE
            bridge_mprun_nproc=$BRIDGE_MPRUN_NNODE
            # Slurm specific workaround for cases where this is not set
            if [[ -z "${bridge_mprun_nproc}" ]]; then
                bridge_mprun_nproc=${SLURM_JOB_NUM_NODES}
                bridge_mprun_nnode=${SLURM_JOB_NUM_NODES}
            fi
        else
            bridge_mprun_force_allocation=yes
        fi
    fi

    return 0
}

function bridge_addon_mprun_spmd_pre_allocate {

    return 0
}

function bridge_addon_mprun_spmd_post_allocate {

    return 0
}

function bridge_addon_mprun_spmd_pre_run {
    if [[ "$BRIDGE_MPRUN_ADDON_FLUX" -eq 1 ]]; then
        if [[ ${BRIDGE_MPRUN_ALLOCATION} == "yes" ]]; then
            typeset -a spmd_run_args_new
            spmd_run_args_new=(/usr/bin/env --unset=BRIDGE_MPRUN_ALLOCATION --unset=BRIDGE_MPRUN_LOOP --unset=BRIDGE_MPRUN_PARTITION --unset=BRIDGE_MPRUN_MAXTIME --unset=BRIDGE_MPRUN_MAXMEM --unset=BRIDGE_MPRUN_EXTRA_PARAMETERS --unset=BRIDGE_MPRUN_PROJECT --unset=spmd_run_options BRIDGE_MPRUN_NPROC=$bridge_mprun_addon_flux_orig_nproc BRIDGE_MPRUN_NCORE=$bridge_mprun_addon_flux_orig_ncore flux start -- "${spmd_run_args[@]}")
            spmd_run_args=("${spmd_run_args_new[@]}")
        fi
    fi

    return 0
}

function bridge_addon_mprun_spmd_post_run {

    return 0
}
#################################################################################
