#*****************************************************************************\
#  scripts/batch_system/plugins/generic - 
#******************************************************************************
#  Copyright  CEA/DAM/DIF (2012)
#
#  This file is part of Bridge, an abstraction layer to ease batch system and
#  resource manager usage in heterogeneous HPC environments.
#
#  Bridge is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  Bridge is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Bridge.  If not, see <http://www.gnu.org/licenses/>
#*****************************************************************************/

###################################################################################################################
# Fonction de soumission v 1.0
#------------------------------------------------------------------------------------------------------------------
#
# Arguments :
#
#  -r request_name              nom de la requete 
#  -s study                     nom de l'etude a laquelle se rapporte la soumission
#  -A project                   nom du projet auquel se rapporte la soumission
#
#  -W                           flag indiquant que deux jobs portant le meme nom de requete peuvent s'executer en simultane
#
#  -S [[month:]day:]hour:minute date de demarrage de l'application               
#  -q queue                     queue d'execution batch a utiliser
#
#  -o output_file               fichier ou stocker le stdout 
#  -e error_file                fichier ou stocker le stderr
#
#  -N nnode                     nombre de noeud parallele souhaite en exclusif
#  -n nproc                     nombre de processus parallele en exclusif
#  -c ncoreperproc              nombre de core par processus parallele en exclusif
#  -m tsmemlimit                quantite max de memoire utilisable en fonctionnement "time sharing"
#  -t tstimelimit               quantite max de temps utilisable en fonctionnement "time sharing"
#  -M tsmemlimit                quantite max de memoire utilisable en fonctionnement "exclusive"
#  -T tstimelimit               quantite max de temps utilisable en fonctionnement "exclusive"
#
#  -L "licenses..."             chaine contenant les parametres de licences
#  -K                           allocation des processeurs en debut de job
#
#------------------------------------------------------------------------------------------------------------------
function submit_cmd {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    typeset VERSION="generic-1.0"

    typeset exit_status=0

    typeset request_name=
    typeset study_name=
    typeset project_name=

    typeset same_request_at_same_time_flag=0

    typeset requested_start_time=
    typeset requested_queue=

    typeset output_file=
    typeset error_file=

    typeset nnode=
    typeset nproc=
    typeset ncoreperproc=
    typeset time_sharing_memlimit
    typeset time_sharing_timelimit
    typeset exclusive_memlimit
    typeset exclusive_timelimit

    typeset requested_licenses=""
    typeset keep_allocation=""

    typeset local_submit_cmd=${bridge_msub_cmd:-echo submit}
    typeset local_submit_args=${bridge_msub_args}

    while getopts r:o:e:s:A:N:n:c:m:t:M:T:L:q:S:KVWE:@:a: option
      do
      case ${option} in
	  
	  r)
	      request_name=${OPTARG}
	      ;;
	  s)
	      study_name=${OPTARG}
	      ;;
	  A)
	      project_name=${OPTARG}
	      ;;
	  W)
	      same_request_at_same_time_flag=1
	      ;;
	  S)
	      requested_start_time=${OPTARG}
	      ;;
	  q)
	      requested_queue=${OPTARG}
	      ;;
	  o)
	      output_file=${OPTARG}
	      ;;
	  e)
	      error_file=${OPTARG}
	      ;;
	  N)
	      nnode=${OPTARG}
	      ;;
	  n)
	      nproc=${OPTARG}
	      ;;
	  c)
	      ncoreperproc=${OPTARG}
	      ;;
	  m)
	      time_sharing_memlimit=${OPTARG}
	      ;;
	  t)
	      time_sharing_timelimit=${OPTARG}
	      ;;
	  M)
	      exclusive_memlimit=${OPTARG}
	      ;;
	  T)
	      exclusive_timelimit=${OPTARG}
	      ;;
	  L)
	      requested_licenses=${OPTARG}
	      ;;
	  K)
	      keep_allocation=1
	      ;;
	  V)
	      echo ${VERSION}
	      return 0
	      ;;
	  E)
	      extra_parameters="${OPTARG}"
	      ;;
	  @)
	      mail_addr=${OPTARG%%:*}
	      if [[ ${OPTARG} != ${mail_addr} ]]
		  then
		  mail_info=${OPTARG#*:}
	      fi
	      ;;
	  a)
              LOCAL_ARGEXP1="$LOCAL_ARGEXP1""after_jobs=${OPTARG}; "
              ;;
	  *)
	      exit_status=255
	      break
	      ;;
      esac
    done
    shift ${OPTIND}-1 2>/dev/null

    if [[ -n ${request_name} ]]
	then
	local_submit_args="${local_submit_args} -r ${request_name}"
    fi
    if [[ -n ${study_name} ]]
    then
	local_submit_args="${local_submit_args} -s ${stydy_name}"
    fi
    if [[ -n ${project_name} ]]
	then
	local_submit_args="${local_submit_args} -p ${project_name}"
    fi
    if [[ ${same_request_at_same_time_flag} -ne 0 ]]
	then
	local_submit_args="${local_submit_args} -W"
    fi
    ## on fixe les informations concernant le mail
    if [[ -n ${mail_addr} ]]
    then
	${LOGGER} "skipping unsupported option -@ ..."
    fi
    ## on fixe les dependances de jobs
    if [[ -n ${after_jobs} ]]
    then
	${LOGGER} "skipping unsupported option -a ${after_jobs}"
    fi
    if [[ -n ${requested_start_time} ]]
	then
	local_submit_args="${local_submit_args} -S ${requested_start_time}"
    fi
    if [[ -n ${requested_queue} ]]
	then
	local_submit_args="${local_submit_args} -q ${requested_queue}"
    fi
    if [[ -n ${output_file} ]]
	then
	local_submit_args="${local_submit_args} -o ${output_file}"
    fi
    if [[ -n ${error_file} ]]
	then
	local_submit_args="${local_submit_args} -e ${error_file}"
    fi
    if [[ -n ${nnode} ]]
	then
	local_submit_args="${local_submit_args} -N ${nnode}"
    fi
    if [[ -n ${nproc} ]]
	then
	local_submit_args="${local_submit_args} -n ${nproc}"
    fi
    if [[ -n ${ncoreperproc} ]]
	then
	local_submit_args="${local_submit_args} -c ${ncoreperproc}"
    fi
    if [[ -n ${time_sharing_memlimit} ]]
	then
	local_submit_args="${local_submit_args} -m ${time_sharing_memlimit}"
    fi
    if [[ -n ${time_sharing_timelimit} ]]
	then
	local_submit_args="${local_submit_args} -t ${time_sharing_timelimit}"
    fi
    if [[ -n ${exclusive_memlimit} ]]
	then
	local_submit_args="${local_submit_args} -M ${exclusive_memlimit}"
    fi
    if [[ -n ${exclusive_timelimit} ]]
	then
	local_submit_args="${local_submit_args} -T ${exclusive_timelimit}"
    fi
    if [[ -n ${requested_licenses} ]]
	then
	local_submit_args="${local_submit_args} -L \"${requested_licenses}\""
    fi
    if [[ -n ${keep_allocation} ]]
	then
	local_submit_args="${local_submit_args} -K"
    fi

    # pas de probleme, on soumet
    if [ ${exit_status} -eq 0 ]
	then
	${LOGGER} -- ${local_submit_cmd} ${local_submit_args} $(printf "%q " "$@")
	${local_submit_cmd} ${local_submit_args} "$@"
    fi
    
    return ${exit_status}
}


###################################################################################################################
# Fonction d'obtention d'informations sur les sessions batch active ou non v 1.0
#------------------------------------------------------------------------------------------------------------------
# Usage : bsstat_cmd [-cC] [-SD] [-u user] [-b batchid] [-q queue] [-H execHost] [-n intNodes] [-N incNodes] [-f begin:end] [-o fields [-s separator]] 
#
# Arguments :
#
#         -c                      Display results in classic format (default)
#         -C                      Display results in classic long format
#         -d                      Display results in new format
#         -D                      Display results in new long format
#         -l                      Light mode, parallel informations are not fetched
#         -u user                 Display results concerning this user
#         -b batchid              Get a batch session giving its batch Id
#         -q queue                Display results concerning this batch queue
#         -H execHost             Display results concerning batch session executed on this this batch host
#         -n intNodes             Display results concerning batch session that use at least one parallel node of this nodes list
#         -N incNodes             Display results concerning batch session which parallel nodes are included in this nodes list
#         -f begin:end            Display finished batch session which finished event was recorded between begin and end date (in seconds, 0 means no limit)
#         -o fields               Display informations using fields format (use -o list for available fields, -o all to get infos for all fields)
#         -s separator            When used with -o options, enables to change results fields separator
#                                 (default is a single spaced string)
#         -v                      When used with -o options, the first output line displays list of selected fields
#         -V                      Print bridge and app versions and exit
#         -S                      Show sum up
#         -O                      Only show sessions that overcome their limits
#         -r                      removes '@partition' including '@' itself in qos field
#
#
# Available fields are :
#
#         batchid       : ID of batch session                         name          : Name of batch session
#         state         : Status of batch session                     reason        : More informations about status
#         user          : Name of batch session owner                 group         : Name of batch session owner group
#         project       : Name of batch session owner project
#         subhost       : Submission host                             subtime       : submition time
#         queue         : Batch queue of batch session                priority      : Batch session priority
#         exechost      : Execution host                              sid           : Execution session id
#         starttime     : Execution start time                        endtime       : Execution end time
#         seqtimeused   : Sequential time used                        seqtimelim    : Sequential time limit
#         useqtimeused  : Sequential time used in user mode           sseqtimeused  : Sequential time used in system mode
#         seqmemused    : Sequential memory used                      seqmemlim     : Sequential memory limit
#         partimeused   : Parallel time used                          partimelim    : Parallel time limit
#         parmemused    : Parallel memory used (per cpu average)      parmemlim     : Parallel memory limit
#         parcpunb      : Parallel CPU quantity used                  parcpunblim   : Parallel CPU maximum quantity
#         parnodeslist  : Parallel executing nodes (condensed)        parnodenames  : Parallel executing nodes (extended)
#
#------------------------------------------------------------------------------------------------------------------
function bsstat_cmd {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    typeset local_bsstat_cmd=${BRIDGE_BSSTAT_CMD:-bsstat}
    typeset local_bsstat_args=""

    typeset VERSION="generic-1.0"

    typeset output_mode=classic

    typeset sumflag=no
    typeset overflag=no

    typeset exit_status=0
    
    typeset sumscript='
BEGIN {l=0;used=0;total=0;} 
{ if(NR<4) print $0; else {if (NF>=lim_row) print $0;l=l+1;used=(used+$(NF-1));total=$NF+total;}}
END {
print  "---------------------------------------------------------------------------------------------------------------------------------------------"
printf "TOTAL\t%d\t\t\t\t\t\t\t\t\t\t\t\t\t\t         %6d%6d\n",l,used,total
}'
    typeset sumscript_new='
BEGIN {jobs_total=0;jobs_running=0; pes_requested=0;pes_used=0}
{ if(NR<3) print $0
   else
  {if (NF>=lim_row)
     {  print $0
        jobs_total=jobs_total+1
        if ( $10 ~ "R" ) 
            { pes_used=$lim_row+pes_used 
              jobs_running=jobs_running+1
        }
        pes_requested=$lim_row+pes_requested
     }
  }
}
END {
print  "-------------------------------------------------------------------------------------------------------------------------------------"
printf "TOTAL                                                                                      %4s/%-4s                       %6s/%-6s\n",jobs_running,jobs_total,pes_used,pes_requested }'



    typeset sumscript_long='
BEGIN {l=0;used=0;total=0;} 
{ if(NR<4) print $0; else {if (NF>=lim_row) {print $0;l=l+1;used=(used+$(lim_row-1));total=$lim_row+total;} }  }
END {
print  "---------------------------------------------------------------------------------------------------------------------------------------------"
printf "TOTAL\t%d\t\t\t\t\t\t\t\t\t\t\t\t\t       %6d%6d\n",l,used,total
}'
    typeset sumscript_newlong='
BEGIN {jobs_total=0;jobs_running=0; pes_requested=0;pes_used=0}
{ if(NR<3) print $0
   else
  {if (NF>=lim_row)
     {  print $0
        jobs_total=jobs_total+1
        if ( $9 ~ "R" )
            { pes_used=$lim_row+pes_used
              jobs_running=jobs_running+1
        }
        pes_requested=$lim_row+pes_requested
     }
  }
}
END {
print  "----------------------------------------------------------------------------------------------------------------------------------"
printf "TOTAL                                                                                %4s/%-4s                     %6s/%-6s\n",jobs_running,jobs_total,pes_used,pes_requested }'


typeset overscript='
{ if(NR<3) print $0
   else 
 {if (NF>=lim_row) 
  { if ( $11 < $10 ) print $0}
 } 
}'

    while getopts VcCdDlru:b:q:H:n:N:f:o:s:vSO option
      do
      case ${option} in
	  V)
	      echo ${VERSION}
	      return 0
	      ;;
	  c)
	      output_mode=classic
	      ;;
	  C)
	      output_mode=long
	      ;;
	  d)
	      output_mode=new
	      ;;
	  D)
	      output_mode=newlong
	      ;;
	  l)
	      local_bsstat_args="${local_bsstat_args} -l"
	      ;;
	  u)
	      local_bsstat_args="${local_bsstat_args} -u ${OPTARG}"
	      ;;
	  b)
	      local_bsstat_args="${local_bsstat_args} -b ${OPTARG}"
	      ;;
	  q)
	      local_bsstat_args="${local_bsstat_args} -q ${OPTARG}"
	      ;;
	  H)
	      local_bsstat_args="${local_bsstat_args} -H ${OPTARG}"
	      ;;
	  n)
	      local_bsstat_args="${local_bsstat_args} -n ${OPTARG}"
	      ;;
	  N)
	      local_bsstat_args="${local_bsstat_args} -N ${OPTARG}"
	      ;;
	  f)
	      local_bsstat_args="${local_bsstat_args} -f ${OPTARG}"
	      ;;
	  o)
	      local_bsstat_args="${local_bsstat_args} -o ${OPTARG}"
	      output_mode=
	      ;;
	  s)
	      local_bsstat_args="${local_bsstat_args} -s ${OPTARG}"
	      ;;
	  v)
	      local_bsstat_args="${local_bsstat_args} -v"
	      ;;
	  S)
	      sumflag=yes
	      ;;
	  O)
	      overflag=yes
	      ;;
	  *)
	      ;;
      esac
    done
    shift ${OPTIND}-1 2>/dev/null

    if [[ $# -gt 1 ]]
	then
	${LOGGER} "Bad usage : more than 1 batchid specified"
	return 255
    elif [[ $# -eq 1 ]]
	then
	local_bsstat_args="${local_bsstat_args} -b $1"
    fi

    typeset lim_row

    if [[ ${output_mode} = "classic" ]]
	then
	local_bsstat_args="${local_bsstat_args} -c"
	lim_row=14
    elif [[ ${output_mode} = "long" ]]
	then
	local_bsstat_args="${local_bsstat_args} -C"
	lim_row=13
    elif [[ ${output_mode} = "new" ]]
	then
	local_bsstat_args="${local_bsstat_args} -d"
	lim_row=14
    elif [[ ${output_mode} = "newlong" ]]
	then
	local_bsstat_args="${local_bsstat_args} -D"
	lim_row=13
    fi

    typeset local_cmd

    FILTRE1=cat 
    if [[ -n ${BRIDGE_MSTAT_EXCLUDED_QUEUES} ]]
    then
        FILTRE1="egrep -wv ${BRIDGE_MSTAT_EXCLUDED_QUEUES}"
    fi

    if [[ ${sumflag} = yes ]]
    then
	    if [[ ${output_mode} = "classic" ]]
	    then
		${local_bsstat_cmd} ${local_bsstat_args} | $FILTRE1 | awk --assign lim_row=${lim_row} "${sumscript}"
	    elif [[ ${output_mode} = "long" ]]
	    then
		${local_bsstat_cmd} ${local_bsstat_args} | $FILTRE1 | awk --assign lim_row=${lim_row} "${sumscript_long}"
	    elif [[ ${output_mode} = "new" ]]
	    then
		${local_bsstat_cmd} ${local_bsstat_args} | $FILTRE1 | awk --assign lim_row=${lim_row} "${sumscript_new}"
	    elif [[ ${output_mode} = "newlong" ]]
	    then
		${local_bsstat_cmd} ${local_bsstat_args} | $FILTRE1 | awk --assign lim_row=${lim_row} "${sumscript_newlong}" 
	    fi
    else
           if [[ ${overflag} = yes ]] ; then
	      local_bsstat_args="${local_bsstat_args} -D"
	      ${local_bsstat_cmd} ${local_bsstat_args} | $FILTRE1 |  awk --assign lim_row=${lim_row} "${overscript}" 
           else
	      ${local_bsstat_cmd} ${local_bsstat_args} | $FILTRE1     # cas general
           fi
    fi
    return $?
}


###################################################################################################################
# Fonction d'obtention d'informations detaillees sur une session batch active ou non v 1.0
#------------------------------------------------------------------------------------------------------------------
# Usage : bsinfo_cmd [-V] [-H] batchid [batchid ...]
#
# Arguments :
#
#         -H                      Get information in history
#         -V                      Print function version
#
#------------------------------------------------------------------------------------------------------------------
function bsinfo_cmd {

    ## on se place en mode debug si souhaite
    typeset -i BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset -i BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1
    typeset VERSION="generic-1.0"
    typeset history_mode=no

    typeset local_bsstat_cmd=${BRIDGE_BSSTAT_CMD:-bsstat}
    typeset local_bsstat_args=""

    while getopts VH option
      do
      case ${option} in
	  V)
	      echo ${VERSION}
	      return 0
	      ;;
	  H)
	      history_mode=yes
	      ;;
	  *)
	      ;;
      esac
    done
    shift ${OPTIND}-1 2>/dev/null
    
    if [[ $# -eq 0 ]]
	then
	${LOGGER} "Bad usage : no batchid specified"
	return 255
    fi
    
    typeset batchid=
    if [[ ${history_mode} = yes ]]
	then
	for batchid in $@
	  do
	  ${local_bsstat_cmd} -f 0:0 -b ${batchid}
	done
    else
	for batchid in $@
	  do
	  ${local_bsstat_cmd} -b ${batchid}
	done
    fi
        
    return 0
}
