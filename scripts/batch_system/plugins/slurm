#!/bin/ksh
#
###################################################################################################################
# Fonction de soumission
# version 1.0
#------------------------------------------------------------------------------------------------------------------
#
# Arguments :
#
#  -r request_name              nom de la requete 
#  -s study                     nom de l'etude a laquelle se rapporte la soumission
#  -A project                   nom du projet auquel se rapporte la soumission
#
#  -W                           flag indiquant que deux jobs portant le meme nom de requete peuvent s'executer en simultane
#
#  -S [[month:]day:]hour:minute date de demarrage de l'application               
#  -q queue                     queue d'execution batch a utiliser
#
#  -o output_file               fichier ou stocker le stdout 
#  -e error_file                fichier ou stocker le stderr
#
#  -N nnode                     nombre de noeud parallele souhaite en exclusif
#  -n nproc                     nombre de processus parallele en exclusif
#  -c ncoreperproc              nombre de core par processus parallele en exclusif (1 par defaut)
#  -m tsmemlimit                quantite max de memoire utilisable en fonctionnement "time sharing"
#  -t tstimelimit               quantite max de temps utilisable en fonctionnement "time sharing"
#  -M tsmemlimit                quantite max de memoire utilisable en fonctionnement "exclusive"
#  -T tstimelimit               quantite max de temps utilisable en fonctionnement "exclusive"
#  -x                           demande une allocation exclusive des noeuds
#
#  -L "licenses..."             chaine contenant les parametres de licences
#  -K                           allocation des processeurs en debut de job
#
#  -E "extra..."                parametres additionels non traites par le wrapper
#
#------------------------------------------------------------------------------------------------------------------

# fonction interne permettat l'obtention d'info sur slurm
# les infos fournies sont :
#
# la major release : ${slurm_major}
# la minor release : ${slurm_minor}
# la release       : ${slurm_release}
#
# le parametre a utiliser pour la memoire : ${slurm_mem_param}
#
function _load_slurm_infos {

    ## on recupere les infos sur la version de slurm utilisee
    ## de la forme "Slurm x.y.z"
    slurm_infos=$(sinfo -V 2>/dev/null)
    slurm_major=${slurm_infos##* }
    slurm_major=${slurm_major%%.*}
    slurm_minor=${slurm_infos%.*}
    slurm_minor=${slurm_minor##*.}
    slurm_release=${slurm_infos##*.}

    ## on fixe le parametre pour la memoire
    if [[ ${slurm_major} -gt 1 ]]
	then
	slurm_mem_param="--mem-per-cpu"
    elif [[ ${slurm_major} -gt 1 ]] && [[ ${slurm_minor} -ge 4 ]]
	then
	slurm_mem_param="--mem-per-cpu"
    elif [[ ${slurm_major} -eq 1 ]] && [[ ${slurm_minor} -ge 4 ]]
	then
	slurm_mem_param="--mem-per-cpu"
    elif [[ ${slurm_major} -eq 1 ]] && [[ ${slurm_minor} -eq 3 ]] && [[ ${slurm_release} -ge 6 ]]
	then
	slurm_mem_param="--mem-per-cpu"
    else
	slurm_mem_param="--mem"
    fi

}

function submit_cmd {
    
    ## on se place en mode debug si souhaite
    typeset BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on fixe les variables de travail
    typeset VERSION="Slurm-1.0"
    typeset LOGGER="${LOGGER} submit:"
    typeset exit_status=0
    typeset local_submit_cmd=${bridge_msub_cmd:-sbatch}
    typeset local_submit_args=${bridge_msub_args}
    typeset LOCAL_ARGEXP1=
    typeset LOCAL_ARGEXP2=
    typeset LOCAL_FILEARG=
    typeset LOCAL_SCRIPTFILE=
    typeset LOCAL_SCRIPTMODE=

    ## on fixe les variables de parametrage
    typeset request_name=
    typeset study_name=
    typeset project_name=
    typeset same_request_at_same_time_flag=0
    typeset requested_start_time=
    typeset requested_queue=${BRIDGE_MSUB_DEFAULT_QUEUE}
    typeset output=
    typeset output_file=
    typeset error_file=
    typeset nnode=${BRIDGE_MSUB_DEFAULT_NNODE}
    typeset nproc=${BRIDGE_MSUB_DEFAULT_NPROC}
    typeset ncoreperproc=${BRIDGE_MSUB_DEFAULT_NCOREPERPROC}
    typeset time_sharing_memlimit
    typeset time_sharing_timelimit
    typeset exclusive_memlimit
    typeset exclusive_timelimit
    typeset requested_licenses=""
    typeset keep_allocation=""
    typeset extra_parameters=
    typeset mail_info=""
    typeset mail_addr=""
    typeset after_jobs=
    typeset exclusive=no
    
    ## on recupere les infos sur la version de slurm utilisee
    _load_slurm_infos

    ## on lit les parametres en entree et on les places dans une variable
    ## de stockage, elle seront utilisees ulterieurement
    while getopts r:o:e:s:A:N:n:c:m:t:M:T:L:q:S:KVWE:@:a:x option
      do
      case ${option} in
	  r)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""request_name=${OPTARG}; "
	      ;;
	  s)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""study_name=${OPTARG}; "
	      ;;
	  A)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""project_name=${OPTARG}; "
	      ;;
	  W)
	      same_request_at_same_time_flag=1
	      ;;
	  S)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""requested_start_time=${OPTARG}; "
	      ;;
	  q)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""requested_queue=${OPTARG}; "
	      ;;
	  ## on traduit un eventuel %I signifiant l'ID du job par l'equivalent LSF (%J)
	  o)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""output_file=$(echo ${OPTARG} | sed -e 's/%I/%J/g'); "
	      ;;
	  ## on traduit un eventuel %I signifiant l'ID du job par l'equivalent LSF (%J)
	  e)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""error_file=$(echo ${OPTARG} | sed -e 's/%I/%J/g'); "
	      ;;
	  N)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""nnode=${OPTARG}; "
	      ;;
	  n)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""nproc=${OPTARG}; "
	      ;;
	  c)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""ncoreperproc=${OPTARG}; "
	      ;;
	  m)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""time_sharing_memlimit=${OPTARG}; "
	      ;;
	  t)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""time_sharing_timelimit=${OPTARG}; "
	      ;;
	  M)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""exclusive_memlimit=${OPTARG}; "
	      ;;
	  T)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""exclusive_timelimit=${OPTARG}; "
	      ;;
	  L)
	      LOCAL_ARGEXP1="$LOCAL_ARGEXP1""requested_licenses=${OPTARG}; "
	      ;;
	  K)
	      keep_allocation=1
	      ;;
	  V)
	      echo ${VERSION}
	      return 0
	      ;;
	  E)
	      extra_parameters=${OPTARG}
	      ;;
	  @)
	      mail_addr=${OPTARG%%:*}
	      if [[ ${OPTARG} != ${mail_addr} ]]
		  then
		  mail_info=${OPTARG#*:}
	      fi
	      ;;
	  a)
              after_jobs=$(echo ${OPTARG} | tr ',' ':')
              LOCAL_ARGEXP1="$LOCAL_ARGEXP1""after_jobs=${after_jobs}; "
              ;;
	  x)
	      exclusive=yes
	      ;;
	  *)
	      exit_status=255
	      break
	      ;;
      esac
    done
    shift ${OPTIND}-1 2>/dev/null

    ## on verifie qu'un argument script est fourni ( le caractere - pour une lecture sur stdin)
    LOCAL_FILEARG=$1
    if [ "$LOCAL_FILEARG" = "" ] ;then
        echo "$0 : argument absent" >&2
        exit 2
    fi
    
    ## on fixe le nom de la requete a partir du nom du script a executer ou par STDIN si lecture sur STDIN
    ## on le fixe tout d'abord a la valeur de scriptname pour commencer afin de charger la valeur devinee par msub
    if [[ -z ${request_name} ]]
	then
	request_name=${scriptname}
    fi
    if [ "$LOCAL_FILEARG" = "-" ]; then
        LOCAL_SCRIPTFILE=${TMPDIR:-/tmp}/STDIN$$
        cat - > $LOCAL_SCRIPTFILE
        LOCAL_SCRIPTMODE=1
	## on fixe un nom de requete si on en a pas (il sera eventuellement surcharge si le script en contient un)
	if [[ -z ${request_name} ]]
	    then
	    request_name=STDIN
	fi
    else
        LOCAL_SCRIPTMODE=0
        LOCAL_SCRIPTFILE=$LOCAL_FILEARG
	## on fixe un nom de requete si on n'en a pas ( il sera eventuellement surcharge si le script en contient un)
	if [[ -z ${request_name} ]]
	    then
	    request_name=$(basename $LOCAL_FILEARG)
	fi
    fi
    
    ## on associe certaines options du script aux variables
    ## locales
    LOCAL_ARGEXP2=`awk "$AWKSCRIPT" < $LOCAL_SCRIPTFILE`
    eval $LOCAL_ARGEXP2

    ## on associe les options fournies en parametre aux variables
    ## locales (surcharge des options du script)
    eval $LOCAL_ARGEXP1

    ## on fixe le nom de la requete
    if [[ -n ${request_name} ]]
	then
	local_submit_args="${local_submit_args} -J ${request_name}"
    fi

    ## LSF ne supporte pas cette option
#     if [[ -n ${study_name} ]]
#     then
# 	local_submit_args="${local_submit_args} -s ${study_name}"   #PBS -N MONJOB
#     fi

    ## on fixe le projet associe a la requete
    if [[ -n ${project_name} ]]
	then
	local_submit_args="${local_submit_args} -A ${project_name}"
    fi

    ## option -P singleton supportee depuis la v1.3.10
    if [[ ${same_request_at_same_time_flag} -eq 0 ]] ; then
	if [[ -n ${after_jobs} ]]
	then
	    ${LOGGER} "ignoring \"-a ...\" option as -w takes precedence"
	fi
	typeset put_singleton=1
	if [[ ${slurm_major} -eq 1 ]] && [[ ${slurm_minor} -eq 3 ]] && [[ ${slurm_release} -ge 10 ]]
	then
	    put_singleton=1
	elif [[ ${slurm_major} -eq 1 ]] && [[ ${slurm_minor} -gt 3 ]]
	then
	    put_singleton=1
	elif [[ ${slurm_major} -gt 1 ]]
	then
	    put_singleton=1
	fi
	if [[ ${put_singleton} -eq 1 ]]
	then
	    extra_parameters="$(echo ${extra_parameters} \
            | awk '/.*/{a=gsub("(--dependency|-P)[= ]?[:a-zA-Z0-9,*]*","&,singleton");if(a==0) {print $0" --dependency=singleton"} else {print $0} }')"
	else
	    ${LOGGER} "singleton concept not supported, skipping"
	fi
    elif [[ -n ${after_jobs} ]]
    then
        local_submit_args="${local_submit_args} -d afterany:${after_jobs}"
    fi

    ## on fixe les informations concernant le mail
    if [[ -n ${mail_addr} ]]
	then
	local_submit_args="${local_submit_args} --mail-user=${mail_addr}"
	case ${mail_info} in
	    begin)
		local_submit_args="${local_submit_args} --mail-type=FAIL --mail-type=BEGIN"
		;;
	    "begin,end")
		local_submit_args="${local_submit_args} --mail-type=ALL"
		;;
	    *)
		local_submit_args="${local_submit_args} --mail-type=FAIL --mail-type=END"
		;;
	esac
    fi

    ## on fixe la date de depart de l'execution
    if [[ -n ${requested_start_time} ]]
	then
	local_submit_args="${local_submit_args} --begin $(echo ${requested_start_time} | tr -d '/')"
    fi

    ## on fixe la queue d'execution souhaitee
    if [[ -n ${requested_queue} ]]
	then
	local_submit_args="${local_submit_args} -p ${requested_queue}"
    fi

    ## on fixe le fichier pour le stdout
    ## si il n'est pas precise, on en construit un par defaut
    if [[ -n ${output_file} ]]
	then
	local_submit_args="${local_submit_args} -o ${output_file}"
    else
	local_submit_args="${local_submit_args} -o ${request_name}.%J.o"
	export BRIDGE_MSUB_STDOUT="${request_name}.%J.o"
    fi

    ## on fixe le fichier pour le stderr
    ## si il n'est pas precise, on en construit un par defaut
    if [[ -n ${error_file} ]]
	then
	local_submit_args="${local_submit_args} -e ${error_file}"
    else
	local_submit_args="${local_submit_args} -e ${request_name}.%J.e"
	export BRIDGE_MSUB_STDERR="${request_name}.%J.e"
    fi

    ## on fixe le nombre de noeud
    if [[ -n ${nnode} ]]
	then
	local_submit_args="${local_submit_args} -N ${nnode}"
    fi

    ## on fixe le nombre de processus
    if [[ -n ${nproc} ]]
	then
	local_submit_args="${local_submit_args} -n ${nproc}"
    fi

    ## on fixe le nombre de core par processus
    if [[ -n ${ncoreperproc} ]]
	then
	local_submit_args="${local_submit_args} -c ${ncoreperproc}"
    fi

    ## Slurm ne supporte pas les deux types de memoire, par default l'exclusive(parallele)
    ## est prefere
    if [[ -n ${exclusive_memlimit} ]]
	then
	typeset memlimit
	(( memlimit = exclusive_memlimit * 1 ))
	local_submit_args="${local_submit_args} ${slurm_mem_param} ${memlimit}"
    elif [[ -n ${time_sharing_memlimit} ]]
        then
        typeset memlimit
        (( memlimit = time_sharing_memlimit * 1 ))
        local_submit_args="${local_submit_args} ${slurm_mem_param} ${memlimit}"
    fi

    ## Slurm ne supporte pas les deux types de temps, par default l'exclusive(parallele)
    ## est prefere
    if [[ -n ${exclusive_timelimit} ]]
	then
	typeset runlimit
	typeset residu
	(( runlimit = exclusive_timelimit / 60 ))
	(( residu = exclusive_timelimit % 60 ))
	runlimit="${runlimit}:${residu}"
	local_submit_args="${local_submit_args} -t ${runlimit}"
    elif [[ -n ${time_sharing_timelimit} ]]
	then
	typeset runlimit
	typeset residu
	(( runlimit = time_sharing_timelimit / 60 ))
	(( residu = time_sharing_timelimit % 60 ))
	runlimit="${runlimit}:${residu}"
	local_submit_args="${local_submit_args} -t ${runlimit}"
    fi

    ## gestion des allocations exclusives
    if [[ ${exclusive} == "yes" ]]
	then
	local_submit_args="${local_submit_args} --exclusive"
    fi

    ## licenses supportees depuis la 1.3
    if [[ -n ${requested_licenses} ]]
 	then
	typeset put_licenses=0
	if [[ ${slurm_major} -eq 1 ]] && [[ ${slurm_minor} -ge 3 ]] && [[ ${slurm_release} -ge 10 ]]
	    then
	    put_licenses=1
	elif [[ ${slurm_major} -gt 1 ]]
	    then
	    put_licenses=1
	fi
	if [[ ${put_licenses} -eq 1 ]]
	    then
	    local_submit_args="${local_submit_args} --licenses=$(echo ${requested_licenses} | tr '=' '*')"
	else
	    ${LOGGER} "licenses management not supported, skipping"
	fi
    fi

    ## LSF par defaut fait toujours une allocation de le depart
#     if [[ -n ${keep_allocation} ]]
# 	then
# 	local_submit_args="${local_submit_args}"
#     fi

    ## pas de probleme, on soumet
    if [ ${exit_status} -eq 0 ]
	then
	## on va faire une allocation dans slurm, donc pas besoin d'en refaire par la suite
	export BRIDGE_MPRUN_ALLOCATION=yes
	${LOGGER} "${local_submit_cmd} ${local_submit_args} ${extra_parameters} $LOCAL_SCRIPTFILE"
	output=$(${local_submit_cmd} ${local_submit_args} ${extra_parameters} $LOCAL_SCRIPTFILE 2>/tmp/errmsub$$)
	exit_status=$?
	output_err=`cat /tmp/errmsub$$`
	if [ -f /tmp/errmsub$$ ]
	then
	    \rm -f /tmp/errmsub$$
	fi
    fi

    ## si la soumission a ete faite par lecture du script sur stdin
    ## on supprime le fichier temporaire cree
    if [ "${LOCAL_SCRIPTMODE}" = 1 ] ;then
	\rm -f ${LOCAL_SCRIPTFILE}
    fi

    ## on affiche en sortie simplement l'ID du job soumis
    if [[ ${exit_status} -eq 0 && -n ${output} ]]
    then
	    # les lignes en sortie de slurm sont de la forme :
            # sbatch: Submitted batch job 345
            # on affiche que l'ID
	    output=${output##*job }
	    echo "${BRIDGE_MSUB_SUBMISSION_MESSAGE}${output}"
    fi

    if [[ ${exit_status} -ne 0 && -n ${output_err} ]]
    then
	## si pb d'execution, on affiche l'output
	    echo ${output_err} | grep -E -o 'error:.*'
    fi
    
    ## on renvoie le code de retour
    return ${exit_status}
}


###################################################################################################################
# Fonction d'obtention d'informations detaillees sur une session batch
# version 1.0
#------------------------------------------------------------------------------------------------------------------
# Usage : bsinfo_cmd [-V] [-H] batchid [batchid ...]
#
# Arguments :
#
#         -H                      Get information in history data
#         -V                      Print function version
#
#------------------------------------------------------------------------------------------------------------------
function bsinfo_cmd {

    ## on se place en mode debug si souhaite
    typeset BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on fixe les variables de travail
    typeset VERSION="Slurm-1.0"
    typeset history_mode=no
    typeset process_mode=no
    typeset process_debug_mode=no

    ## on lit les parametres
    while getopts VH:b:p: option
      do
      case ${option} in
	  V)
	      echo ${VERSION}
	      return 0
	      ;;
	  b)
	      process_mode=yes
              batchid=$OPTARG
	      ;;
	  p)
	      process_debug_mode=yes
              procid=$OPTARG
	      ;;
	  H)
	      history_mode=yes
              batchid=$OPTARG
	      ;;
      esac
    done
    shift ${OPTIND}-1 2>/dev/null

## on verifie qu'au moins un batchid est donne
    if [[ $batchid = ""  ]]
        then
        ${LOGGER} "Bad usage : no batchid specified"
        return 255
    fi

    ## on agit en fonction du mode
    if [[ ${history_mode} = yes ]]
    then
      OPTS="-o JobID%7,JobName%10,Partition%8,reqcpus%6,account%18,start,timelimit,elapsed,State,ExitCode"
      if [ "$batchid" = "all" ] ; then
        # selection des jobs des 8 derniers jours
          OPTS="$OPTS --allocations -S $(date -d '8 days ago' +'%Y-%m-%dT%H:%M')"
	  if [[ -n ${BRIDGE_MSTAT_EXCLUDED_QUEUES} ]]
	  then
              OPTS="$OPTS | egrep -v \"${BRIDGE_MSTAT_EXCLUDED_QUEUES}\""
	  fi
      else
        OPTS="$OPTS -j $batchid"
      fi
     eval sacct $OPTS

    elif [[ ${process_debug_mode} = yes ]]
       then
       EXEC_SERVER=$(${BRIDGE_BSSTAT_CMD} -o exechost -b $batchid)
       if [  "$EXEC_SERVER" != "" -a "$EXEC_SERVER" != "-" ] 
            then
                REMOTE_COMMAND=/cea/spool/home/$USER/gdb_$$
                trap 'rm $REMOTE_COMMAND 2>/dev/null' 0 1
                cat <<EOF > $REMOTE_COMMAND
#! /bin/ksh
CMD=\$(ps -p $procid -o cmd --noheader | cut -d" " -f1)
PT=\$(echo \$CMD | cut -c1)
if [ "\$PT" != "/"  ] ; then
        POSSIBLE_CMD=\$(which \$CMD 2>/dev/null)
        PT=\$(echo \$POSSIBLE_CMD | cut -c1)
        if [ "\$PT" != "/"  ] ; then
             /bin/echo -n  "Path absolu de la commande \$CMD ? ">&2
             read CMD
        else
             CMD=\$POSSIBLE_CMD
        fi
fi
if [ "\$(file \$CMD) | grep executable)" = "" ] ; then
        echo "mstat : \$CMD n'est pas un executable" &>2
        exit 1
fi
(echo where; echo quit ; sleep 2) | gdb -q -pid $procid \$CMD 2>&1 | egrep -v "^Loaded|Reading"
EOF
                 chmod +x $REMOTE_COMMAND
                 ssh $EXEC_SERVER $REMOTE_COMMAND
       fi
    elif [[ ${process_mode} = yes ]]
       then
       EXEC_SERVER=$(${BRIDGE_BSSTAT_CMD} -o exechost -b $batchid)
       if [  "$EXEC_SERVER" != "" -a "$EXEC_SERVER" != "-" ] 
            then
            REMOTE_COMMAND="ps f -o pid,ppid,stat,wchan,rss,%cpu,start,cputime,command -p \`scontrol listpids $batchid | cut -d' ' -f1 | sed '1d'\`" 
            ssh $EXEC_SERVER  $REMOTE_COMMAND 2>/dev/null
       fi
    else
        scontrol show job $@
    fi
        
    return $?
}


###################################################################################################################
# Fonction d'arret et/ou de transmission d'un signal a une session batch
# version 1.0
#------------------------------------------------------------------------------------------------------------------
# Usage : bsdel_cmd [-V] [-k] [-K] [-s signal] [-r allocid] batchid [batchid ...]
#
# Arguments :
#        -V          : print function version
#
#        -k          : kill mode
#        -K          : kill mode with batch system database remove of the batch session
#
#        -s signal   : signal to send
#        -r allocid  : resource allocation to signal/delete inside the batch session
#        batchid     : ID of the targeted batch session
#
#------------------------------------------------------------------------------------------------------------------
function bsdel_cmd {

    ## on se place en mode debug si souhaite
    typeset BRIDGE_DEBUG_LEVEL=${BRIDGE_DEBUG_LEVEL:-0}+1
    if [ "${BRIDGE_DEBUG_MODE}" = "yes" ] && [[ ${BRIDGE_DEBUG_LEVEL} -le ${BRIDGE_DEBUG_MAXLEVEL} ]]
	then
	set -x
    fi

    ## on incremente le niveau de log
    typeset BRIDGE_VERBOSE_LEVEL=${BRIDGE_VERBOSE_LEVEL:-0}+1

    ## on fixe les variables de travail
    typeset VERSION="Slurm-1.0"
    typeset LOCAL_ERROR=
    typeset exit_status=0
    typeset kill_cmd=scancel
    typeset kill_mode=no
    typeset kill_and_remove_mode=no
    typeset signal=SIGTERM
    typeset allocid=

    ## on lit les parametres
    while getopts VkKs:r: option
      do
      case ${option} in
	  V)
	      echo ${VERSION}
	      return 0
	      ;;
	  k)
	      kill_mode=yes
	      ;;
	  K)
	      kill_and_remove_mode=yes
	      ;;
	  s)
	      signal=${OPTARG}
	      ;;
	  r)
	      ## avec LSF, on ne peut pas atteindre les allocations sous-jacente
	      ## on enregistre la valeur mais on ne s'en servira pas
	      allocid=${OPTARG}
	      ;;
      esac
    done
    shift ${OPTIND}-1 2>/dev/null

    ## on verifie qu'au moins un batchid est donne
    if [[ $# -eq 0 ]]
	then
	${LOGGER} "Bad usage : no batchid specified"
	return 255
    fi
    
    ## le mode kill va correspondre a un scancel sans specification
    ## de signal
    if [[ ${kill_mode} = yes ]]
	then
	signal=
    fi
    
    ## on transmet le signal demande
    for job in "$@"
    do
	if [[ -n ${signal} ]]
	then
	    signal=$(echo ${signal} | sed 's/SIG//')

	    ${BRIDGE_RMASTAT_CMD} -r $job -o batchid | grep -q $job
	    if [[ $? -eq 0 ]]
	    then
		# It's a batch job, signal the batch script to allow graceful termination
		kill_args="-s ${signal} -b"
	    else
		kill_args="-s ${signal}"
	    fi
	fi

	case "${signal}" in
	    SUSP)
		kill_cmd="scontrol suspend"
		kill_args=""
		;;

	    CONT)
		kill_cmd="scontrol resume"
		kill_args=""
		;;

	    TERM|KILL)
		# slurm ne supprime pas un job pending
		# si on tente d'envoyer un signal TERM ou KILL
		if [[ -n $(squeue --state=PENDING -ho %i -j $job 2>/dev/null) ]]
		then
		    ${LOGGER} "Command : scancel --state=PENDING $job"
		    scancel --state=PENDING $job >/dev/null 2>&1
		    last_exit_status=$?
		    if [[ ${last_exit_status} -eq 0 ]]
		    then
			continue
		    fi
		fi
		;;
	esac

	${LOGGER} "Command : ${kill_cmd} ${kill_args} $job"
	LOCAL_ERROR=$(${kill_cmd} ${kill_args} $job 2>&1)
	last_exit_status=$?
	if [[ ${last_exit_status} -ne 0 ]]
	then
	    ${ERROR} ${LOCAL_ERROR}
	    exit_status=$last_exit_status
	fi
    done
    ## on renvoie le code de retour
    return ${exit_status}
}
