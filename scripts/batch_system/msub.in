#!/bin/ksh
#------------------------------------------------------------------------------------------------------------------
# wrapper permettant la soumission d'applications Batch avec LSF
#------------------------------------------------------------------------------------------------------------------


###################################################################################################################
#
# FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES 
#
# FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES FONCTIONS INTERNES 
#
###################################################################################################################

###################################################################################################################
# fonction d'affichage de l'usage
#------------------------------------------------------------------------------------------------------------------
function show_usage {

    echo "${USAGE}"  >& 2
    bridge_addons_call_function bridge_addon_msub_getopt -h

    return 0
}
###################################################################################################################


###################################################################################################################
#
# PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL
#
# PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL PROGRAMME PRINCIPAL
#
###################################################################################################################


###################################################################################################################
# Initialisation des parametres de base
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_VERSION="@PACKAGE_NAME@-@PACKAGE_VERSION@"
typeset PROG_VERSION="1.0.0"
#------------------------------------------------------------------------------------------------------------------
# le repertoire de base est fixe lors de l'installation du produit (via ./configure)
# si il n'est pas coherent, c'est a dire qu'il ne correspond pas a un repertoire
# on fixe un repere dans le systeme de fichier en utilisant le chemin d acces a l executable
#------------------------------------------------------------------------------------------------------------------
typeset BASE_DIR=`dirname $0`
typeset PROGNAME=`basename $0`
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_BASEDIR=@prefix@
if [[ ! -d ${BRIDGE_BASEDIR} ]]
    then
    BRIDGE_BASEDIR=${BRIDGE_BASEDIR:-${BASE_DIR}/../}
fi
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_BINDIR=${BRIDGE_BASEDIR}/bin
typeset BRIDGE_SCRIPTSDIR=${BRIDGE_BASEDIR}/share/scripts
typeset BRIDGE_BATCH_SYSTEM_PLUGINDIR=${BRIDGE_BASEDIR}/share/scripts/batch_system/plugins
typeset BRIDGE_ADDON_DIR=${BRIDGE_BASEDIR}/share/scripts/addons
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_CONFDIR=${BRIDGE_BASEDIR}/etc
if [[ ! -d ${BRIDGE_CONFDIR} ]]
    then
    BRIDGE_CONFDIR=/etc
fi
#------------------------------------------------------------------------------------------------------------------
# on fixe les options de base du script, utilisees par les addons pour parser les lignes de commandes
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_MSUB_GETOPT_OPTIONS="dvVDhe:o:r:s:p:T:N:n:c:M:wWKm:t:L:q:P:S:E:@:xA:"
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_HOSTNAME=$(hostname 2>/dev/null)
#------------------------------------------------------------------------------------------------------------------
# on fixe les categories auquelles ce programme appartient (les categories determinent les fichiers de conf
# a sourcer lors de la lecture de la configuration (bridge_readconf)
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_CATEGORIES="bridge_bs"
#------------------------------------------------------------------------------------------------------------------
# on fixe les variables liees a la log
#------------------------------------------------------------------------------------------------------------------
typeset BRIDGE_DEBUG_MODE=no
typeset BRIDGE_CHECK_ONLY=no
typeset BRIDGE_VERBOSE_MODE=no
typeset BRIDGE_VERBOSE_LEVEL=1
typeset BRIDGE_VERBOSE_MAXLEVEL=0
typeset BRIDGE_LOGFILE=""
typeset BRIDGE_MSUB_SUBMISSION_MESSAGE="Submitted Batch Session "
typeset EXIT_STATUS=0

# -K            : allocation des processeurs en debut de job  ( defaut : allocation a la demande )
#------------------------------------------------------------------------------------------------------------------
ARGS=""
ARGEXP0=""
ARGEXP1=""
ARGEXP2=""
#------------------------------------------------------------------------------------------------------------------
GAWK=$(whence gawk)
AWK=${GAWK:=nawk}
#------------------------------------------------------------------------------------------------------------------
typeset submit_cmd=submit_cmd
typeset submit_args=
#------------------------------------------------------------------------------------------------------------------

###################################################################################################################
# On source les librairies communes utiles et on fixe les variables de log
#------------------------------------------------------------------------------------------------------------------
. ${BRIDGE_SCRIPTSDIR}/common/bridge_command
. ${BRIDGE_SCRIPTSDIR}/common/bridge_printer
. ${BRIDGE_SCRIPTSDIR}/common/bridge_readconf
. ${BRIDGE_SCRIPTSDIR}/common/bridge_toolbox
. ${BRIDGE_SCRIPTSDIR}/common/bridge_addon
typeset LOGGER="bridge_printer ${DEFAULT_PRINTER_OPTIONS} -t verbose Main :"
typeset ERROR="bridge_printer ${DEFAULT_PRINTER_OPTIONS} -ft error Main :"
###################################################################################################################

###################################################################################################################
# On lit la configuration du programme et des categories qu'il utilise
#------------------------------------------------------------------------------------------------------------------
bridge_readconf
###################################################################################################################

#------------------------------------------------------------------------------------------------------------------
# on fixe l'usage de la commande et le code retour par defaut
#------------------------------------------------------------------------------------------------------------------
# on regarde la valeur par defaut du mode singleton (-w|-W) et on agit en fonction
# on modifie directement OPTION_W pour pouvoir etre eventuellement surcharge par les
# options du scripts ou de la ligne de commande
if [[ ${BRIDGE_SINGLETON_MODE} == "1" ]]
then
    OPTION_W=0
    singleton_W_default=no
    singleton_w_default=yes
else
    OPTION_W=1
    singleton_W_default=yes
    singleton_w_default=no
fi
typeset USAGE="usage : ${PROGNAME} [-dvhV] \\
        [-o output_file] [-e error_file] [-r reqname] [-A projid ] [-s study] \\
        [-N node_limit ] [ -n proc_limit ] [ -c core_limit ] \\
        [-T time_limit] [-t time_limit] [-M mem_limit] [-m mem_limit] \\
        [-W] [-w] [-K] [-L \"appli1=nb1,appli2=nb2,...\"] \\
        [-E \"extra_parameters...\"] [-S starttime] [-q queue] [script]

 ${PROGNAME} is the CCC batch submission interface.
 Depending on the underlying batch system characteristics, some parameters can be disabled.
 You can increase verbosity to see what is really executed at the batch system level.

 -h            : print this message
 -D            : increase debug level
 -v            : increase verbosity
 -V            : print application version

 -o output_file: standard output file (special character %I will be replaced by the job ID)
 -e error_file : standard error file (special character %I will be replaced by the job ID)

 -r reqname    : job name
 -s study      : related study name
 -A projid     : project/account name (use of the -p switch is now deprecated)

 -n            : number of tasks that will be used in parallel mode (default=1)
 -c            : number of cores per parallel task to allocate (default=1)
 -N            : number of nodes to allocate for parallel usage (default is chosen by the underlying system)

 -T time_limit : maximum walltime of the batch job in seconds (default=18000)
 -M mem_limit  : maximum memory amount required per allocated core in Mo (default is chosen by the underlying system)

 -W            : let multiple jobs sharing the same name and user run simultaneously (default is ${singleton_W_default})
 -w            : prevent multiple jobs sharing the same name and user to run simultaneously (default is ${singleton_w_default})
 -x            : request for exclusive usage of allocated nodes

 -L \"appli1=nb1,appli2=nb2,...\" : ask for various amount of licenses

 -E \"extra_parameters...\" : extra parameters to pass directly to the underlying batch system

 -q queue      : requested queue (default is chosen by the underlying system)

 -S starttime  : requested start time using format like \"HH:MM\" or \"MM/DD HH:MM\"

 -@ mailopts   : mail options following the pattern mailaddr[:begin|end|begin,end]
                 exp: ${PROGNAME} -@ jdoe@foo.com:begin,end
                 will send a mail to jdoe at the begining and the end of the job
                 default behavior depends of the underlying batch system

 script        : batch script to execute (default is read from stdin)

Comments :

   * Previous parameters can be directly put into scripts using the #MSUB prefix like in the following example :

     bash$ cat myscript
     #MSUB -n 4
     #MSUB -A account
     hostname
     bash$ ${PROGNAME} myscript
     Submitted Batch Session 1654
     bash$

   * Command line parameters take precedence over script parameters

Addons :

 Following options can be used too :

"

###################################################################################################################
# on appelle les fonctions mprun_setopt des differents addons afin d'initialiser le format du getopt en prenant en
# compte leurs besoins
#------------------------------------------------------------------------------------------------------------------
typeset in_args="$@"
bridge_addons_call_function bridge_addon_msub_setopt
#------------------------------------------------------------------------------------------------------------------
# Analyse des options de la ligne de commande (priorite 1)
# et sauvegarde du nom du script
#------------------------------------------------------------------------------------------------------------------
# si l'une des options -n,-N ou -c est specifiee sur la ligne de commande, aucune de ces options ne pourra etre 
# surchargee par un #MSUB et le #MSUB -x ne sera pas pris en compte
export DISABLE_OVERRIDE_OPTION_N=0
export DISABLE_OVERRIDE_OPTION_n=0
export DISABLE_OVERRIDE_OPTION_c=0
export DISABLE_OVERRIDE_OPTION_x=0

while getopts ${BRIDGE_MSUB_GETOPT_OPTIONS} option
do
  addonoption=""
  case $option
      in
      d)
	  BRIDGE_DEBUG_MODE=yes;
	  ((BRIDGE_DEBUG_MAXLEVEL = BRIDGE_DEBUG_MAXLEVEL + 1 ))
	  ;;
      v)
	  BRIDGE_VERBOSE_MODE=yes;
	  ((BRIDGE_VERBOSE_MAXLEVEL = BRIDGE_VERBOSE_MAXLEVEL + 1 ))
	  ;;
      h) 
	  show_usage
	  exit 0
	  ;;
      V) 
	  echo "${PROGNAME}-${PROG_VERSION} (${BRIDGE_VERSION:-?})"
	  exit 0
	  ;;
      e) ARGEXP1="$ARGEXP1""OPTION_e=$OPTARG; ";;
      o) ARGEXP1="$ARGEXP1""OPTION_o=$OPTARG; ";;
      r) ARGEXP1="$ARGEXP1""OPTION_r=$OPTARG; ";;
      s) ARGEXP1="$ARGEXP1""OPTION_s=$OPTARG; ";;
      S) ARGEXP1="$ARGEXP1""OPTION_S=$OPTARG; ";;
      p) ARGEXP1="$ARGEXP1""OPTION_A=$OPTARG; ";;
      A) ARGEXP1="$ARGEXP1""OPTION_A=$OPTARG; ";;
      T) ARGEXP1="$ARGEXP1""OPTION_T=$OPTARG; ";;
      t) ARGEXP1="$ARGEXP1""OPTION_t=$OPTARG; ";;
      N) ARGEXP1="$ARGEXP1""OPTION_N=$OPTARG; " ; DISABLE_OVERRIDE_OPTION_n=1 ;  DISABLE_OVERRIDE_OPTION_x=1 ;  DISABLE_OVERRIDE_OPTION_c=1 ;;
      n) ARGEXP1="$ARGEXP1""OPTION_n=$OPTARG; " ; DISABLE_OVERRIDE_OPTION_N=1 ;  DISABLE_OVERRIDE_OPTION_x=1 ;  DISABLE_OVERRIDE_OPTION_c=1 ;;
      c) ARGEXP1="$ARGEXP1""OPTION_c=$OPTARG; " ; DISABLE_OVERRIDE_OPTION_N=1 ;  DISABLE_OVERRIDE_OPTION_x=1 ;  DISABLE_OVERRIDE_OPTION_n=1 ;;
      M) ARGEXP1="$ARGEXP1""OPTION_M=$OPTARG; ";;
      m) ARGEXP1="$ARGEXP1""OPTION_m=$OPTARG; ";;
      W) ARGEXP1="$ARGEXP1""OPTION_W=1; ";;
      w) ARGEXP1="$ARGEXP1""OPTION_W=0; ";;
      K) ARGEXP1="$ARGEXP1""OPTION_K=1; ";;
      L) ARGEXP1="$ARGEXP1""OPTION_L=\"$OPTARG\"; ";;
      q) ARGEXP1="$ARGEXP1""OPTION_q=$OPTARG; ";;
      P) ARGEXP1="$ARGEXP1""OPTION_P=$OPTARG; ";;
      E) ARGEXP1="$ARGEXP1""OPTION_E=\"$OPTARG\"; ";;
      @) ARGEXP1="$ARGEXP1""OPTION_at=\"$OPTARG\"; ";;
      x) ARGEXP1="$ARGEXP1""OPTION_x=yes; ";;
      *)
	  if [[ -n ${OPTARG} ]]
	      then
	      addonoption="${option}:"
	  else
	      addonoption=${option}
	  fi
	  echo ${BRIDGE_MSUB_GETOPT_OPTIONS} | grep -q  ${addonoption}
	  if [[ $? -eq 0 ]]
	      then
	      continue
	  else
	      show_usage
	      exit 1
	  fi
	  ;;
  esac
done
OPTIND2=`expr $OPTIND - 1`
i=1
while [ $i -le $OPTIND2 ]
  do
        shift
        i=`expr $i + 1` 
done
[ $# != 0 ] && eval BRIDGE_MSUB_SCRIPTFILE=$`echo $#`
#------------------------------------------------------------------------------------------------------------------
# on appelle les functions msub_getopt des differents addons avec les arguments d'entree
bridge_addons_call_function bridge_addon_msub_getopt ${in_args}
###################################################################################################################


###################################################################################################################
# On se place en mode debug si necessaire
#------------------------------------------------------------------------------------------------------------------
if [[ "${BRIDGE_DEBUG_MODE}" = "yes" ]]
    then
    set -x
fi
###################################################################################################################


###################################################################################################################
# On charge le plugin defini dans la conf et on verifie que la fonction de soumission existe
#------------------------------------------------------------------------------------------------------------------
for BATCH_SYSTEM in generic ${BATCH_SYSTEM}
  do
  typeset batch_system_plugin_file=${BRIDGE_BATCH_SYSTEM_PLUGINDIR}/${BATCH_SYSTEM}
  if [[ ! -r ${batch_system_plugin_file} ]]
      then
      ${ERROR} "Batch system plugin '${BATCH_SYSTEM}' : ${batch_system_plugin_file} : no such file"
      return 254
  fi
  . ${batch_system_plugin_file}
done
typeset submit_cmd_version
submit_cmd_version=$(${submit_cmd} -V 2>/dev/null)
if [[ $? -ne 0 ]]
    then
    ${ERROR} "Batch system plugin '${BATCH_SYSTEM}' : unable to get plugin submission cmd version"
    return 253
else
    ${LOGGER} "Batch system plugin '${BATCH_SYSTEM}' : ${submit_cmd} version ${submit_cmd_version} "
fi
###################################################################################################################


###################################################################################################################
# Si pas de script defini sur la ligne de commande, generation interactive dans un fichier temporaire
# Sinon recopie du script en entree dans un fichier temporaire
#------------------------------------------------------------------------------------------------------------------
typeset scriptfile_BIS=""
if [[ -z ${BRIDGE_MSUB_SCRIPTFILE} ]]
    then

    scriptname=STDIN

    scriptfile_BIS=$(bridge_tmpfile "${TMPDIR:-/tmp}/STDIN")
    ## si impossible de creer le fichier de travail, on sort en erreur
    if [[ $? -ne 0 ]]
	then
	${ERROR} "unable to create temporary script file"
	exit 1
    else
	BRIDGE_MSUB_SCRIPTFILE=${scriptfile_BIS}

	## on tente de renseigner le fichier script avec les donnees utilisateurs
	BRIDGE_ERROR=$(cat -  2>&1 > ${BRIDGE_MSUB_SCRIPTFILE})
	if [[ $? -ne 0 ]]
	    then
	    ${ERROR} "unable to write into temporary script file : ${BRIDGE_ERROR:--}"
	    exit 1
	fi

	## on modifie les droits du fichier script pour le rendre executable
	BRIDGE_ERROR=$(chmod +x ${BRIDGE_MSUB_SCRIPTFILE})
	if [[ $? -ne 0 ]]
	    then
	    ${ERROR} "unable to chmod +x temporary script file : ${BRIDGE_ERROR:--}"
	    exit 1
	fi

    fi

elif [ ! -f ${BRIDGE_MSUB_SCRIPTFILE} ]
    then

    ${ERROR} "${BRIDGE_MSUB_SCRIPTFILE} : no such file"
    exit 1

else

    ## on duplique le fichier en entree (afin de pouvoir y appliquer tous les traitements souhaites sans l'alterer)
    scriptname=$(basename ${BRIDGE_MSUB_SCRIPTFILE})
    scriptfile_BIS=$(bridge_tmpfile ${TMPDIR:-/tmp}/${scriptname})
    ## si impossible de creer le fichier de travail, on sort en erreur
    if [[ $? -ne 0 ]]
	then
	${ERROR} "unable to create temporary script file"
	exit 1
    else
	
	## on tente de renseigner le fichier script avec les donnees utilisateurs
	BRIDGE_ERROR=$(cat ${BRIDGE_MSUB_SCRIPTFILE} 2>&1 > ${scriptfile_BIS} )
	if [[ $? -ne 0 ]]
	    then
	    ${ERROR} "unable to write into temporary script file : ${BRIDGE_ERROR:--}"
	    exit 1
	fi
	
	BRIDGE_MSUB_SCRIPTFILE=${scriptfile_BIS}

	## on modifie les droits du fichier script pour le rendre executable
	BRIDGE_ERROR=$(chmod +x ${BRIDGE_MSUB_SCRIPTFILE})
	if [[ $? -ne 0 ]]
	    then
	    ${ERROR} "unable to chmod +x temporary script file : ${BRIDGE_ERROR:--}"
	    exit 1
	fi

    fi

fi
###################################################################################################################


###################################################################################################################
# Analyse des options du fichier script (priorite 2)
#------------------------------------------------------------------------------------------------------------------
AWKSCRIPT='
/^#QSUB/ {
	opt=0
        for(i=2; i<=NF; i++) 
                if ($i=="-lT") {
                        printf("OPTION_T=")
                        i++
                        printf("%d ", $i)
			opt=1
                }
                else if ($i=="-lM") {
                        printf("OPTION_M=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-e") {
                        printf("OPTION_e=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-o") {
                        printf("OPTION_o=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-r") {
                        printf("OPTION_r=")
                        i++
                        printf("%s ", $i)
                        opt=1
	        }
                else if ($i=="-N") {
                        if ( "'$DISABLE_OVERRIDE_OPTION_n'"=="0") {
                         printf("OPTION_n=")
                         i++
                         printf("%s ", $i)
                         opt=1
                        }
	        }
                else if ($i=="-n") {
                        if ( "'$DISABLE_OVERRIDE_OPTION_n'"=="0") {
                         printf("OPTION_n=")
                         i++
                         printf("%s ", $i)
                         opt=1
                        }
	        }
                else if ($i=="-c") {
                        if ( "'$DISABLE_OVERRIDE_OPTION_c'"=="0") {
                          printf("OPTION_c=")
                          i++
                          printf("%s ", $i)
                          opt=1
                        }
	        }
   	if ($opt==1) { printf("; ") }
 }
/^#MSUB/ {
        opt=0
        for(i=2; i<=NF; i++)
                if ($i=="-T") {
                        printf("OPTION_T=")
                        i++
                        printf("%d ", $i)
                        opt=1
                }
		else if ($i=="-t") {
			printf("OPTION_t=")
                        i++
                        printf("%d ", $i)
                        opt=1
                }
                else if ($i=="-e") {
                        printf("OPTION_e=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-o") {
                        printf("OPTION_o=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-r") {
                        printf("OPTION_r=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-s") {
                        printf("OPTION_s=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-p" || $i=="-A") {
                        printf("OPTION_A=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-N") {
                        if ( "'$DISABLE_OVERRIDE_OPTION_N'"=="0") {
                          printf("OPTION_N=")
                          i++
                          printf("%s ", $i)
                          opt=1
                        }
                }
                else if ($i=="-n") {
                        if ( "'$DISABLE_OVERRIDE_OPTION_n'"=="0") {
                         printf("OPTION_n=")
                         i++
                         printf("%s ", $i)
                         opt=1
                        }
                }
                else if ($i=="-c") {
                        if ( "'$DISABLE_OVERRIDE_OPTION_c'"=="0") {
                          printf("OPTION_c=")
                          i++
                          printf("%s ", $i)
                          opt=1
                        }
                }
		else if ($i=="-M") {
                        printf("OPTION_M=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
		else if ($i=="-m") {
                        printf("OPTION_m=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-W") {
                        printf("OPTION_W=1 ")
                        opt=1
                }
                else if ($i=="-w") {
                        printf("OPTION_W=0 ")
                        opt=1
                }
                else if ($i=="-K") {
                        printf("OPTION_K=1 ")
                        opt=1
                }
                else if ($i=="-L") {
                        printf("OPTION_L=")
                        i++
                        for ( j=i ; j<=NF ; j++ )
                          printf("%s ", $j)
                        printf(" ")
                        opt=1
                }
                else if ($i=="-E") {
                        printf("OPTION_E=")
                        i++
                        for ( j=i ; j<=NF ; j++ )
                          printf("%s ", $j)
                        printf(" ")
                        opt=1
                }
                else if ($i=="-q") {
                        printf("OPTION_q=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-x") {
                        if ( "'$DISABLE_OVERRIDE_OPTION_x'"=="0") {
                         printf("OPTION_x=yes ")
                         opt=1
                        }
                }
                else if ($i=="-@") {
                        printf("OPTION_at=")
                        i++
                        printf("%s ", $i)
                        opt=1
                }
                else if ($i=="-P") {
                        printf("OPTION_P=")
                        i++
                        for ( j=i ; j<=NF ; j++ )
                          printf("%s ", $j)
                        printf(" ")
                        opt=1
                }

        if ($opt==1) { printf("; ") }
 }
'
ARGEXP2=`$AWK "$AWKSCRIPT" < ${BRIDGE_MSUB_SCRIPTFILE}`
eval $ARGEXP2
###################################################################################################################


###################################################################################################################
# on place les parametres dans l'environnement avec surcharge des parametres fichier (priorite 1)
#------------------------------------------------------------------------------------------------------------------
if [[ ${DISABLE_OVERRIDE_OPTION_N} -eq 1 ]] || [[ ${DISABLE_OVERRIDE_OPTION_n} -eq 1 ]] || \
    [[ ${DISABLE_OVERRIDE_OPTION_c} -eq 1 ]] || [[ ${DISABLE_OVERRIDE_OPTION_x} -eq 1 ]]
then
    ${LOGGER} "disabling #MSUB [-c|-n|-N|-x] parameters due to command line [-c|-n|-N] options"
fi
eval $ARGEXP1
###################################################################################################################


###################################################################################################################
# Post-traitement des parametres
#------------------------------------------------------------------------------------------------------------------
# on s'assure que les valeurs memoires sont exprimees en Mo
if [ "$OPTION_m" != "" ] ; then 
    OPTION_m=$(bridge_get_memlimit $OPTION_m)   # MEMLIMIT en Mo
fi
if [ "$OPTION_M" != "" ] ; then 
    OPTION_M=$(bridge_get_memlimit $OPTION_M)   # MEMLIMIT en Mo
fi
#------------------------------------------------------------------------------------------------------------------
# on surcharge la queue en fonction de la phase associee au run
case "${OPTION_P}" in
    stage_out|STAGE_OUT|stg_out|STG_OUT)
	## une phase de stage out determine necessairement la queue stg_out
	OPTION_q=stg_out
	;;
    *)
	;;
esac
###################################################################################################################


###################################################################################################################
# On associe les options aux variables d'environnement correspondantes
#------------------------------------------------------------------------------------------------------------------
# submission working directory
export BRIDGE_MSUB_PWD=${PWD}
# request name
export BRIDGE_MSUB_REQNAME=${OPTION_r}
if [[ -z ${BRIDGE_MSUB_REQNAME} ]]
then
    BRIDGE_MSUB_REQNAME=${scriptname}
fi
# project name
export BRIDGE_MSUB_PROJECT=${OPTION_A}
# study name
export BRIDGE_MSUB_STUDY=${OPTION_s}
# multi job for same request name authorization
if [[ ${OPTION_W} -eq 1 ]]
    then
    BRIDGE_MSUB_MULTIREQ=1
else
    BRIDGE_MSUB_MULTIREQ=${BRIDGE_MSUB_MULTIREQ:-0}
fi
export BRIDGE_MSUB_MULTIREQ
# start time
export BRIDGE_MSUB_STARTTIME=${OPTION_S}
# queue name
if [[ -n ${OPTION_q} ]]
then
    export BRIDGE_MSUB_QUEUE=${OPTION_q}
fi
# requested stdout file
export BRIDGE_MSUB_STDOUT=${OPTION_o}
# requested stderr file
export BRIDGE_MSUB_STDERR=${OPTION_e}
# requested node  number
export BRIDGE_MSUB_NNODE=${OPTION_N}
# requested process number
export BRIDGE_MSUB_NPROC=${OPTION_n}
# requested core per process number
export BRIDGE_MSUB_NCORE=${OPTION_c}
# requested memory for shared parts of job
export BRIDGE_MSUB_MAXSMEM=${OPTION_m}
# requested time for shared parts of job
export BRIDGE_MSUB_MAXSTIME=${OPTION_t}
# requested memory per core in exclusive mode
export BRIDGE_MSUB_MAXMEM=${OPTION_M}
# requested time in exclusive mode
export BRIDGE_MSUB_MAXTIME=${OPTION_T}
# requested licences
export BRIDGE_MSUB_LICENSES="${OPTION_L}"
# non interpreted extra parameters
export BRIDGE_MSUB_EXTRA_PARAMETERS="${OPTION_E}"
# mail information
export BRIDGE_MSUB_MAIL_INFO="${OPTION_at}"
# exclusive parameter
export BRIDGE_MSUB_EXCLUSIVE="${OPTION_x:-no}"
###################################################################################################################


###################################################################################################################
# On effectue eventuellement une alteration des options via les addons
#------------------------------------------------------------------------------------------------------------------
bridge_addons_call_function bridge_addon_msub_alteropt
###################################################################################################################


###################################################################################################################
# On fixe eventuellement des valeurs par defaut
#------------------------------------------------------------------------------------------------------------------
if [[ -z ${BRIDGE_MSUB_QUEUE} ]]
    then
    BRIDGE_MSUB_QUEUE=${BRIDGE_MSUB_DEFAULT_QUEUE}
fi
if [[ -z ${BRIDGE_MSUB_PROJECT} ]]
    then
    BRIDGE_MSUB_PROJECT=${BRIDGE_MSUB_DEFAULT_PROJECT}
fi
if [[ -z ${BRIDGE_MSUB_NNODE} ]]
    then
    BRIDGE_MSUB_NNODE=${BRIDGE_MSUB_DEFAULT_NNODE}
fi
if [[ -z ${BRIDGE_MSUB_NPROC} ]]
    then
    BRIDGE_MSUB_NPROC=${BRIDGE_MSUB_DEFAULT_NPROC}
fi
if [[ -z ${BRIDGE_MSUB_NCORE} ]]
    then
    BRIDGE_MSUB_NCORE=${BRIDGE_MSUB_DEFAULT_NCORE}
fi
if [[ -z ${BRIDGE_MSUB_MAXSTIME} ]]
    then
    BRIDGE_MSUB_MAXSTIME=${BRIDGE_MSUB_DEFAULT_MAXSTIME}
fi
if [[ -z ${BRIDGE_MSUB_MAXSMEM} ]]
    then
    BRIDGE_MSUB_MAXSMEM=${BRIDGE_MSUB_DEFAULT_MAXSMEM}
fi
if [[ -z ${BRIDGE_MSUB_MAXMEM} ]]
    then
    BRIDGE_MSUB_MAXMEM=${BRIDGE_MSUB_DEFAULT_MAXMEM}
fi

if [[ -z ${BRIDGE_MSUB_MAXTIME} ]]
    then
    BRIDGE_MSUB_MAXTIME=${BRIDGE_MSUB_DEFAULT_MAXTIME}
fi
if [[ -z ${BRIDGE_MSUB_EXTRA_PARAMETERS} ]]
    then
    BRIDGE_MSUB_EXTRA_PARAMETERS="${BRIDGE_MSUB_DEFAULT_EXTRA_PARAMETERS}"
else
    BRIDGE_MSUB_EXTRA_PARAMETERS="${BRIDGE_MSUB_DEFAULT_EXTRA_PARAMETERS} ${BRIDGE_MSUB_EXTRA_PARAMETERS}"
fi
###################################################################################################################


###################################################################################################################
# On verifie la coherence de certains parametres
#------------------------------------------------------------------------------------------------------------------
if [[ ${BRIDGE_MSUB_NNODE} == 0 ]]
    then
    ${LOGGER} "requested nodes number is invalid"
    EXIT_STATUS=241
fi
if [[ ${BRIDGE_MSUB_NPROC} == 0 ]]
    then
    ${LOGGER} "requested processes number is invalid"
    EXIT_STATUS=242
fi
if [[ ${BRIDGE_MSUB_NCORE} == 0 ]]
    then
    ${LOGGER} "requested cores per process is invalid"
    EXIT_STATUS=243
fi
###################################################################################################################

###################################################################################################################
# On effectue eventuellement une alteration du script en entree via les addons
#------------------------------------------------------------------------------------------------------------------
bridge_addons_call_function bridge_addon_msub_alterscript
###################################################################################################################


###################################################################################################################
# Construction des arguments de la fonction de soumission
# on reexporte aussi les variables BRIDGE, elles peuvent avoir changees
#------------------------------------------------------------------------------------------------------------------
typeset submit_args=""
# request name
if [[ -n ${BRIDGE_MSUB_REQNAME} ]]
    then
    submit_args="${submit_args} -r ${BRIDGE_MSUB_REQNAME}"
fi
export BRIDGE_MSUB_REQNAME
# study name
if [[ -n ${BRIDGE_MSUB_STUDY} ]]
    then
    submit_args="${submit_args} -s ${BRIDGE_MSUB_STUDY}"
fi
export BRIDGE_MSUB_STUDY
# project name
if [[ -n ${BRIDGE_MSUB_PROJECT} ]]
    then
    submit_args="${submit_args} -A ${BRIDGE_MSUB_PROJECT}"
fi
export BRIDGE_MSUB_PROJECT
# multi job for same request name authorization
if [[ ${BRIDGE_MSUB_MULTIREQ} == "1" ]]
    then
    submit_args="${submit_args} -W"
fi
export BRIDGE_MSUB_MULTIREQ
# requested start time 
if [[ -n ${BRIDGE_MSUB_STARTTIME} ]]
    then
    submit_args="${submit_args} -S ${BRIDGE_MSUB_STARTTIME}"
fi
export BRIDGE_MSUB_STARTTIME
# requested queue
if [[ -n ${BRIDGE_MSUB_QUEUE} ]]
    then
    submit_args="${submit_args} -q ${BRIDGE_MSUB_QUEUE}"
fi
export BRIDGE_MSUB_QUEUE
# requested stdout file
if [[ -n ${BRIDGE_MSUB_STDOUT} ]]
    then
    submit_args="${submit_args} -o ${BRIDGE_MSUB_STDOUT}"
fi
export BRIDGE_MSUB_STDOUT
# requested stderr file
if [[ -n ${BRIDGE_MSUB_STDERR} ]]
    then
    submit_args="${submit_args} -e ${BRIDGE_MSUB_STDERR}"
fi
export BRIDGE_MSUB_STDERR
# requested node number
if [[ -n ${BRIDGE_MSUB_NNODE} ]]
    then
    ## ensure that processes number is at least equal to
    ## nodes number
    if [[ -n ${BRIDGE_MSUB_NPROC} ]] && \
	[[ ${BRIDGE_MSUB_NPROC} -lt ${BRIDGE_MSUB_NNODE} ]]
	then
	${LOGGER} "warning : setting nodes number to processes number" \
	    "for consistency"
	BRIDGE_MSUB_NNODE=${BRIDGE_MSUB_NPROC}
    fi
    submit_args="${submit_args} -N ${BRIDGE_MSUB_NNODE}"
    # usefull to ${BRIDGE_MPRUN_CMD}
    export BRIDGE_MPRUN_NNODE=${BRIDGE_MSUB_NNODE}
fi
export BRIDGE_MSUB_NNODE
# requested process number
if [[ -n ${BRIDGE_MSUB_NPROC} ]]
    then
    submit_args="${submit_args} -n ${BRIDGE_MSUB_NPROC}"
    # usefull to ${BRIDGE_MPRUN_CMD}
    export BRIDGE_MPRUN_NPROC=${BRIDGE_MSUB_NPROC}
fi
export BRIDGE_MSUB_NPROC
# requested core per process
if [[ -n ${BRIDGE_MSUB_NCORE} ]]
    then
    submit_args="${submit_args} -c ${BRIDGE_MSUB_NCORE}"
    # usefull to ${BRIDGE_MPRUN_CMD}
    export BRIDGE_MPRUN_NCORE=${BRIDGE_MSUB_NCORE}
fi
export BRIDGE_MSUB_NCORE
# requested memory for shared parts of job
if [[ -n ${BRIDGE_MSUB_MAXSMEM} ]]
    then
    submit_args="${submit_args} -m ${BRIDGE_MSUB_MAXSMEM}"
fi
export BRIDGE_MSUB_MAXSMEM
# requested time for shared parts of job
if [[ -n ${BRIDGE_MSUB_MAXSTIME} ]]
    then
    submit_args="${submit_args} -t ${BRIDGE_MSUB_MAXSTIME}"
fi
export BRIDGE_MSUB_MAXSTIME
# requested memory per core in exclusive mode
if [[ -n ${BRIDGE_MSUB_MAXMEM} ]]
    then
    submit_args="${submit_args} -M ${BRIDGE_MSUB_MAXMEM}"
    # usefull to ${BRIDGE_MPRUN_CMD}
    export BRIDGE_MPRUN_MAXMEM=${BRIDGE_MSUB_MAXMEM}
fi
export BRIDGE_MSUB_MAXMEM
# requested time in exclusive mode
if [[ -n ${BRIDGE_MSUB_MAXTIME} ]]
    then
    submit_args="${submit_args} -T ${BRIDGE_MSUB_MAXTIME}"
    # usefull to ${BRIDGE_MPRUN_CMD}
    export BRIDGE_MPRUN_MAXTIME=${BRIDGE_MSUB_MAXTIME}
fi
export BRIDGE_MSUB_MAXTIME
# requested licences
if [[ -n ${BRIDGE_MSUB_LICENSES} ]]
    then
    submit_args="${submit_args} -L \"${BRIDGE_MSUB_LICENSES}\""
fi
export BRIDGE_MSUB_LICENSES
# non interpreted extra parameters
if [[ -n ${BRIDGE_MSUB_EXTRA_PARAMETERS} ]]
    then
    submit_args="${submit_args} -E \"${BRIDGE_MSUB_EXTRA_PARAMETERS}\""
fi
export BRIDGE_MSUB_EXTRA_PARAMETERS
# mail information
if [[ -n ${BRIDGE_MSUB_MAIL_INFO} ]]
    then
    submit_args="${submit_args} -@ ${BRIDGE_MSUB_MAIL_INFO}"
fi
export BRIDGE_MSUB_MAIL_INFO
# exclusive allocation
if [[ ${BRIDGE_MSUB_EXCLUSIVE} == yes ]]
    then
    submit_args="${submit_args} -x"
fi
export BRIDGE_MSUB_EXCLUSIVE
###################################################################################################################


###################################################################################################################
# Execution de la fonction de soumission
#------------------------------------------------------------------------------------------------------------------
if [[ ${EXIT_STATUS} -eq 0 ]]
    then
    ${LOGGER} "${submit_cmd} ${submit_args} ${BRIDGE_MSUB_SCRIPTFILE}"
    eval ${submit_cmd} ${submit_args} ${BRIDGE_MSUB_SCRIPTFILE}
    EXIT_STATUS=$?
fi
###################################################################################################################


###################################################################################################################
# Nettoyage
#------------------------------------------------------------------------------------------------------------------
if [[ -f ${scriptfile_BIS} ]]
    then
    rm -f ${scriptfile_BIS}
fi
###################################################################################################################


###################################################################################################################
# Sortie
#------------------------------------------------------------------------------------------------------------------
return ${EXIT_STATUS}
###################################################################################################################
